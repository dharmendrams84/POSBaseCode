<!--
/* ===========================================================================
* Copyright (c) 2008, 2012, Oracle and/or its affiliates. All rights reserved. 
 * ===========================================================================
 * ===========================================================================
 * NOTES
 * <other useful comments, qualifications, etc.>
 *
 * MODIFIED    (MM/DD/YY)
 *    drbarber  02/24/12 - BUG 13734271: Make db upgrader ant script work with
 *                         POS
 *    abondala  11/16/11 - take out the ejb prefix from the jndi to make it
 *                         work for both red and blue stacks and also to make
 *                         it work for rmi and webservices ctr lookup.
 *    abondala  11/03/11 - if webservices option is not selected, use RMI for
 *                         CTR.
 *    abondala  11/03/11 - fixed the CTR-RMI lookup issue which is broken due
 *                         to local queues configuration.
 *    abondala  10/31/11 - centraloffice integration screens are updated to
 *                         prompt for backoffice server information if BO is
 *                         integrated with CO where POS post messages on the
 *                         local queues hosted by BO and these local queues are
 *                         integrated with the CO queues.
 *    ohorne    10/29/11 - copy oracle.retail.posrm jars only for server
 *                         install
 *    sgu       10/26/11 - remove jpos jars from installer bundle
 *    asinton   10/24/11 - removed remaining references to Ingenico and
 *                         Verifone CPOI dependancies since they are now
 *                         covered by 3rd party under APF.
 *    sthallam  10/19/11 - Fix for Bluestack POS installation
 *    tzgarba   10/10/11 - Added qatest and unittest data load options.
 *    abondala  10/05/11 - introduced ant task for all string encryption
 *                         functions which will be used by all the installers
 *    mszekely  09/27/11 - BUG 12973574: lock down file perms after failed
 *                         installation
 *    mszekely  09/28/11 - BUG 13035134: Pincomm install issue in non ssl mode
 *    tzgarba   09/26/11 - Updated to use the secure record task to prevent
 *                         logging of passwords.
 *    ohorne    09/23/11 - SSL PinComm support
 *    abondala  09/23/11 - use wallet for jms passwords instead of using rsa
 *                         keystore
 *    tzgarba   09/21/11 - Added standalone database installation targets
 *    ohorne    09/20/11 - fix for expand_dataset not found
 *    ohorne    09/19/11 - decoupled sample data from installers
 *    cgreene   09/19/11 - move ExternalOrderManager to domain
 *    tzgarba   08/19/11 - Removed dbbuild scripts from POS bin directory
 *    mszekely  08/16/11 - BUG 12859927: Make logging level configurable via
 *                         installer
 *    mchellap  08/16/11 - BUG#12840510 WAS jars path not added to posenv.sh
 *    tksharma  08/11/11 - LAT Webservice URL modification in POS installer
 *    cgreene   08/05/11 - refactor and add ability for windowOfOperation to
 *                         POSLogExportDaemon
 *    drbarber  08/04/11 - BugDB: 12703340: POS Red Stack Installer prompts for
 *                         jpos.xml location but does not add it to classpath
 *    drbarber  07/21/11 - BUG 12573758: Removing RSA client libraries
 *    ohorne    07/11/11 - added PinComm connector section to
 *                         PaymentManager.xml
 *    mszekely  07/11/11 - BUG 12735925: POS installer throws fileset warnings
 *    ohorne    06/30/11 - enable MSR and Bar Code scanner fixes
 *    jswan     06/29/11 - Modified to set signature capture supported
 *                         paramater for false in application.properties for
 *                         Servbase.
 *    abondala  06/24/11 - if there is problem with the message that is sent to
 *                         centraloffice for importing, mart that transation as
 *                         unavailable for processig that can be processed
 *                         later after fixing the issue.
 *    ohorne    06/23/11 - upgrade isd jars from 295 to 303a
 *    abondala  06/21/11 - refactoring based on review comments.
 *    ohorne    06/17/11 - Spring loaded ISDTK properties
 *    ohorne    06/16/11 - ApplicationContext.xml uncommenting for PinComm
 *    abondala  06/10/11 - XbranchMerge abondala_send_tx_through_websvc_part1
 *                         from main
 *    sgu       06/09/11 - add install changes to enable/disable encryption
 *                         utility for pincomm
 *    ohorne    05/27/11 - added PinComm RetailTransactionTechnician.xml logic
 *    cgreene   06/07/11 - update to first pass of removing pospal project
 *    abondala  06/07/11 - XbranchMerge
 *                         abondala_send_tx_to_co_through_webservice from main
 *    ohorne    05/27/11 - added PinComm RetailTransactionTechnician.xml logic
 *    ohorne    05/13/11 - APF support for PINComm and Servebase
 *    rsnayak   04/15/11 - XbranchMerge rsnayak_bug-12360131 from main
 *    abondala  06/10/11 - uncomment email appender only if co webservice is
 *                         enabled
 *    abondala  06/02/11 - email notification if the central office server is
 *                         not responding
 *    abondala  04/29/11 - introduce webservice for sending transactions and
 *                         ejournals to the centraloffice application
 *    rsnayak   04/15/11 - lat webservice fix
 *    blarsen   03/31/11 - fixing problem with WAS/MQ junk being left in
 *                         posenv.sh on linux/weblogic installs
 *    hyin      03/18/11 - remove derby jars
 *    rsnayak   03/14/11 - deployment failure fix
 *    abondala  02/19/11 - prompt for MQ jars required for sedning RM final
 *                         result messages through MQ API.
 *    abondala  02/16/11 - updated
 *    abondala  02/03/11 - updated
 *    abondala  02/03/11 - updated after code review
 *    abondala  01/27/11 - Introduce commext for processing final result
 *                         messages in rm-pos integration
 *    asinton   01/26/11 - adding support for simulated devices to reduce
 *                         errors in the logging.
 *    hyin      01/25/11 - modification per review comment
 *    hyin      01/25/11 - add support for digitalpersona fingerprint device
 *    djenning  12/17/10 - making some ssl regex replaces global and enabling a
 *                         register keystore when jmsssl is used
 *    blarsen   11/30/10 - renamed input.wl.jndi.port to input.rm.wl.jndi.port
 *                         for clarity reasons. Changed invocation order of
 *                         init-conditions and init-properties. init-conditions
 *                         now relies only on user inputs. init-properties now
 *                         depends on init-conditions.
 *    sgu       11/29/10 - check in all
 *    cgreene   11/23/10 - convert storeid and workstationid to token for regex
 *    ohorne    11/17/10 - obfuscate passwords in rsa_config.properties
 *    ohorne    11/11/10 - Siebel install properties cleanup
 *    ohorne    11/08/10 - fix for jms username and password in
 *                         install-stage-pos-bin-jndi-properties
 *    djenning  11/09/10 - fix the error installing storeserverconduit
 *    blarsen   11/05/10 - Making files which RSA modifies at writeable.
 *                         Copying the rsa_config.properties file only when rsa
 *                         is enabled.
 *    asinton   11/02/10 - install isd config.properties file on store server
 *                         only if isd option chosen
 *    npoola    10/27/10 - added the unix check for the posenv.sh file update
 *                         instead of WAS check
 *    acadar    10/27/10 - changes to reset external order status when
 *                         canceling suspended transactions
 *    abondala  09/30/10 - fix secure rmi issues.
 *    abondala  09/21/10 - refactor ibm query for testing database connection
 *    abondala  09/13/10 - merge update
 *    abondala  09/13/10 - Introduced a new screen that will prompt for all the
 *                         applications that can be integrated.
 *    asinton   09/10/10 - Add IBM libraries for classpath
 *    asinton   08/19/10 - encrypting the install phrase
 *    abondala  08/18/10 - If the CTR is enabled, then use scratch pad schema
 *                         sequences to persist the transaction during returns.
 *    djenning  08/11/10 - use wallet for posfoundation keystore/truststore
 *                         passwords
 *    djenning  08/10/10 - merge
 *    djenning  08/06/10 - merge and keep password for jms when secure
 *                         communications & weblogic
 *    djenning  08/05/10 - merge
 *    djenning  08/05/10 - security for weblogic POS
 *    djenning  08/03/10 - update for optional truststore password
 *    djenning  07/23/10 - pos phase 1
 *    abondala  08/06/10 - access sequences using dbowner.schemaName and will
 *                         not be creating either synonyms or aliases on oracle
 *                         and db2 as we have some issues with sharing the
 *                         sequences between schemas by creating aliases.
 *    asinton   08/03/10 - Install ISD jars only when desired by installer
 *                         choice.
 *    mszekely  07/28/10 - BUG 9927499: Weblogic sanity checks
 *    abondala  07/21/10 - fix RM - POS integration errors
 *    abondala  07/20/10 - encode siebel url
 *    rrkohli   07/16/10 - added fix to enable bill pay when POS-SIM
 *                         integration is disbled
 *    ohorne    07/13/10 - Uncomment service_SiebelMappingService bean
 *                         definition
 *    npoola    07/09/10 - updated the was jars to 7.0.0.9 version
 *    abondala  07/07/10 - Use CSF framework for encrypting/decrypting database
 *                         passwords in the technician xml files
 *    abondala  07/07/10 - convert the trust store location path from windows
 *                         format to unix format
 *    abhayg    06/29/10 - Fix for Network Receipt Printing issue
 *    asinton   06/25/10 - Fixed the uncommenting of VAT enablement.
 *    mchellap  06/25/10 - Billpay installer changes
 *    mszekely  06/16/10 - BUG 9720757: Adding 6 additional languages
 *    asinton   06/10/10 - added installer phrase property to
 *                         application.properties.
 *    asinton   06/04/10 - Updated install scripts to capture install phrase.
 *    abondala  06/04/10 - siebel authentication types
 *    npoola    06/03/10 - displayed a new installer screen for the was jar for
 *                         the webservice integration
 *    asinton   06/03/10 - Fixed replacefilter for unix install of
 *                         POSPAL_CLASSPATH
 *    abondala  06/02/10 - updated
 *    abondala  06/01/10 - Siebel integration changes
 *    npoola    05/28/10 - added the WAS runtime, mqm, mq, dhbcore jars to the
 *                         classpath
 *    asinton   05/28/10 - put HP_ENV and POSPAL libraries into classpath
 *    abondala  05/27/10 - Siebel installer updates
 *    abondala  05/27/10 - Installer changes for Siebel integration
 *    djenning  05/26/10 - remove jms username/password markers when not
 *                         needed.
 *    asinton   05/25/10 - Set file permissions to most restrictive possible
 *                         and Fix uncommenting of VAT sections in tourmap.xml.
 *    djenning  05/25/10 - remove password
 *    djenning  05/24/10 - weblogic integration
 *    djenning  05/25/10 - corrected
 *    djenning  05/25/10 - remove parameter technician for standalone POS and
 *                         remove jms credentials for weblogic POS
 *    cgreene   05/17/10 - only change tourmap for vat if install is client
 *    cgreene   05/14/10 - do not cert-pos-was if not WAS and not secure jms
 *    mchellap  05/14/10 - Fixed PSI classpath issues
 *    cgreene   05/10/10 - remove 360 from common folder
 *    asinton   05/06/10 - Upgrade to ISD version 285
 *    abondala  05/03/10 - XbranchMerge abondala_tech_78 from
 *                         st_rgbustores_techissueseatel_generic_branch
 *    asinton   04/26/10 - XbranchMerge asinton_remove-empty-dirs-full from
 *                         st_rgbustores_techissueseatel_generic_branch
 *    abondala  04/15/10 - merged with the tip
 *    abondala  04/14/10 - Updated
 *    abondala  04/14/10 - central office webservices
 *    abondala  04/14/10 - updated webservices
 *    cgreene   04/14/10 - rename deployment jars oracle.stores
 *    cgreene   04/13/10 - install offline whether client or server
 *    cgreene   04/13/10 - don't do cert-pos.sh if not on unix
 *    cgreene   04/12/10 - copy ant-contrib to ant/lib
 *    cgreene   04/09/10 - segregate client and server deployment files
 *    cgreene   04/06/10 - update apache-ant version and remove it from
 *                         360Common
 *    abhayg    03/23/10 - nabling POS SIM WebService Security
 *    ohorne    03/16/10 - added
 *                         install-stage-pos-config-client-non-sim-devices-printer-none
 *    mszekely  03/03/10 - BUG 8676849: Fix for RSA keystore newline issue
 *    mszekely  02/22/10 - BUG 9388040: Install xercesImpl.jar from thirdparty
 *                         area
 *    mchellap  02/16/10 - Fix derby user id encryption
 *    djenning  01/27/10 - merge
 *    djenning  01/27/10 - update certificate work ( more to go ) and checkin
 *                         fix for StoreServerConduit.xml updates
 *    blarsen   01/26/10 - The IBM US printer line size should be 44.
 *    asinton   01/25/10 - Installer change to prompt for Cherry Keyboard
 *                         drivers when installing to HP platform.
 *    djenning  01/14/10 - merge
 *    djenning  01/13/10 - NOSSL
 *    djenning  01/12/10 - ssl + mq series topology change
 *    vikini    01/11/10 - Set InventoryUpdate install to true
 *    vikini    01/11/10 - Renaming InventoryUpdatesEnabled to
 *                         InventoryUpdateEnabled
 *    asinton   01/07/10 - Shorten locales classpath by adding pointer jar.
 *    abondala  01/02/10 - Update Header date
 *    nkgautam  12/24/09 - installer change for serialization
 *    mchellap  12/23/09 - Code clean up: Removed psib.jar and psir.jar
 *    nganesh   12/21/09 - changed serialization property name
 *    vikini    12/17/09 - Installer changes for Inventory Inquiry and
 *                         Serialization
 *    ohorne    12/10/09 - printer session fix
 *    vikini    12/10/09 - Installer for Itembasket and InventoryUpdate
 *    vikini    12/10/09 - Changes for Itembasket and Inventory Update
 *                         installer
 *    vikini    12/10/09 - refreshing to tip
 *    abondala  12/09/09 - updated
 *    abondala  12/09/09 - database can be loaded through installer for POS
 *                         Server. Use this option if POS is not integrated
 *                         with BO.
 *    vikini    12/10/09 - checkin after refresh to tip
 *    acadar    12/08/09 - refreshed to tip
 *    abondala  12/07/09 - create scratchpad schema with installer if
 *                         integrated with CentralOffice
 *    acadar    12/08/09 - checked in Owen's changes for postscript and pcl
 *                         printing
 *    acadar    12/07/09 - updates based on code review comments
 *    acadar    12/07/09 - fix the problem that resulted in both
 *                         POSPrinterActionGroupIfc and PrinterActionGroupIfc
 *                         being uncommented in PosDeviceTechnician.xml
 *    acadar    12/02/09 - checked in Owen's changes for the Ipp installer
 *    ohorne    12/02/09 - added installer support for IPP Printing
 *    mchellap  12/01/09 - Fixed item basket installer issue
 *    vikini    12/08/09 - Incorporating Code Review Comments
 *    vikini    12/07/09 - installer changes for Inventory Updates
 *    nkgautam  11/20/09 - itembasket installer changes
 *    vikini    11/18/09 - Checkin after ade merge
 *    vikini    11/18/09 - incorporating Code Review comments
 *    vikini    11/17/09 - adding RM-POS Keystore file Location and Password
 *                         info
 *    vikini    11/16/09 - adding info for RM-POS Keystore file Location and
 *                         Password
 *    cgreene   11/10/09 - switch pos installed -encrypted keys to -property
 *    tzgarba   11/02/09 - Phase 2 of third party refactor. Refactored
 *                         remaining libraries and removed 11 more unused
 *                         libraries.
 *    mchellap  09/29/09 - BUG#8932741 Enable RM Webservice authentication
 *    mchellap  09/22/09 - Merge Checkin
 *    mchellap  09/16/09 - BUG 8848037 CSF Changes : Copy CSF config files and
 *                         jars to pos installation directory
 *    mszekely  07/16/09 - XbranchMerge mszekely_bug-8650269 from
 *                         rgbustores_13.1x_branch
 *    mszekely  07/16/09 - XbranchMerge mszekely_bug-8545716 from
 *                         rgbustores_13.1x_branch
 *    asinton   06/17/09 - Removing parameter MerchantNumber.
 *    abondala  05/29/09 - removed additional db2 license jar which is not
 *                         needed with 9.5.3 db2 version.
 *    mszekely  05/01/09 - BUG 8483023 configuration for HP printers
 *    asinton   04/30/09 - Removed unused condition for NO DEVICES selected.
 *    mszekely  04/30/09 - BUG 8481201 chmod +x .sh files
 *    msawatph  04/10/09 - uncomment out Tellis change for the validate target.
 *                         This will now check if install directory exist.
 *    mszekely  04/10/09 - BUG 8415819 fail if JRE is under an appserver
 *    mszekely  03/30/09 - BUG 8394390 - populated default hostname
 *    mszekely  03/19/09 - BUG 8327374 enable statementCacheSize for Oracle db
 *                         only
 *    mchellap  03/09/09 - BUG 8293946 application.properties derby password
 *                         encryption
 *    asinton   02/28/09 - Merged.
 *    asinton   02/28/09 - Added call to update PosDeviceTechnician.xml for Verifone.
 *    mchellap  02/27/09 - BUG 8294090 Fixed replace filter for Failover Begin
 *                         comment
 *    mchellap  02/20/09 - BUG 8274691 Updates for IDDI enhancement
 *    mszekely  02/12/09 - BUG 8241193 - ItemBasket integration
 *    mdecama   02/12/09 - Added LookAndFeel support by Locale
 *    mszekely  02/03/09 - BUG 8222694 update configured.store.id in
 *                         InsertTableIDDIDataSet.sql
 *    abondala  02/02/09 - updated files related to hash algorithm which can be
 *                         configured
 *    mszekely  01/28/09 - BUG 7639984 Inventory Reservation DueFiles
 *    mszekely  01/23/09 - BUG 7639984 Inventory Reservation support
 *    mszekely  12/19/08 - BUG 7484178 - remove parameter distribution
 *    mszekely  12/17/08 - BUG 7646594 add gen.locales to pos installer
 *    mszekely  12/15/08 - BUG 7544358 more changes for POS-RM
 *    mszekely  12/11/08 - BUG 7635240 PosPal cleanup
 *    mszekely  12/11/08 - BUG 7544348 POS-RM installer changes
 *    mszekely  12/10/08 - BUG 7544348 POS to RM
 *    mszekely  12/09/08 - 7544348 POS to RM integration
 *    mszekely  12/04/08 - BUG 7524348 POS to RM support
 *    mszekely  12/01/08 - BUG 7589815 - eReceipts
 *    mszekely  11/11/08 - BUG 7555392 RSA for installers
 *
 * ===========================================================================
 */
-->
<project name="install-pos" basedir="." default="install">
    <!-- *************************************************************
        *
        * POS application installer script
        *
        ****************************
        * How this script is called:
        ****************************
        * This ANT script takes a set of input properties and installs
        * the Point-of-Service application. The input properties are passed
        * using the ant.install.properties file. When the AntInstaller
        * interface (install.sh/install.cmd) is run it will prompt for
        * values for these properties. After it has collected the
        * settings from the user it will write the ant.install.properties
        * file and run this script to do the actual installation.
        *
        ************************
        * What this script does:
        ************************
        * This script does the following things:
        *
        *  1) Trims all inputs of leading and trailing whitespace
        *     characters.
        *  2) Configures application files and places them in a
        *     staging area.
        *  3) Makes copies of certain app server files, makes config
        *     changes to them, and places them in the same staging
        *     area as #2.
        *  4) Applies app server changes from staging area to the
        *     application server installation.
        *  5) Deploys ear file to the application server instance
        *     specified.
        *
        *  Note: Steps 4 and 5 will be skipped if the
        *        input.install.to.appserver property is not "true".
        *        This is a feature that allows the installer to
        *        configure the retail application without writing
        *        anything to the application server.
        *
        **********
        * Logging:
        **********
        * This script writes a detailed log file:
        * orpos-install-app.<timestamp>.log
        *
        ************************************************************* -->
    <taskdef resource="net/sf/antcontrib/antcontrib.properties"/>
    <taskdef name="for" classname="net.sf.antcontrib.logic.ForTask"/>
    <taskdef name="xmltask" classname="com.oopsconsultancy.xmltask.ant.XmlTask"/>
    <taskdef name="securerecord" classname="oracle.retail.stores.build.installer.ant.SecureRecorder"/>
    <taskdef name="stringenc" classname="oracle.retail.stores.common.utility.StringEncryptionAntTask"/>
    <import file="build-common.xml"/>
    <import file="build-conditions.xml"/>
    <import file="build-properties.xml"/>
    <import file="build-filesets.xml"/>
    <import file="build-filters.xml"/>
    <import file="build-antinstall.xml"/>
    <target name="init" depends="init-macros,init-filesets,init-conditions,init-properties,init-filters"/>
    <target name="clean-logs" depends="init">
        <mask-plaintext-password dir="${basedir}" password="${input.db.password}"/>
        <mask-plaintext-password dir="${basedir}" password="${input.db.owner.password}"/>
        <mask-plaintext-password dir="${basedir}" password="${input.scratchpad.db.password}"/>
        <mask-plaintext-password dir="${basedir}" password="${input.app.admin.password}"/>
        <mask-plaintext-password dir="${basedir}" password="${input.bo.admin.password}"/>
        <mask-plaintext-password dir="${basedir}" password="${input.co.admin.password}"/>
        <mask-plaintext-password dir="${basedir}" password="${input.rm.admin.password}"/>
        <mask-plaintext-password dir="${basedir}" password="${input.keystore.install.phrase}"/>
    </target>
    <target name="clean-staging">
        <delete dir="${basedir}/tmp"/>
    </target>
    <target name="install" depends="init,validate,install-stage,install-config,install-pre-deploy,install-deploy,deploy-database,deploy-scratchpad-database,install-post-deploy"/>
    <target name="install-stage" depends="install-stage-init,install-stage-common,install-stage-jars,install-stage-pos,install-stage-bat-files"/>
    <target name="install-config" depends="install-config-jre"/>
    <target name="install-database" depends="init,install-stage,deploy-database"/>
    <target name="install-scratchpad" depends="init,install-stage,deploy-scratchpad-database"/>
    <target name="install-pre-deploy">
        <!-- Remove files unused by client/server installs -->
        <antcall target="install-pre-deploy-clean-client" inheritRefs="true" />
        <antcall target="install-pre-deploy-clean-server" inheritRefs="true"/>
    </target>
    <target name="install-pre-deploy-clean-client" if="install.is-client-install">
        <delete failonerror="false" verbose="${installer.verbose}">
            <fileset refid="staging.client.unused.fileset"/>
        </delete>
    </target>
    <target name="install-pre-deploy-clean-server" if="install.is-server-install">
        <delete failonerror="false" verbose="${installer.verbose}">
            <fileset refid="staging.server.unused.fileset"/>
        </delete>
    </target>
    <target name="install-post-deploy">
        <!-- Copy the ant.install.properties to the pos/log folder for reference -->
        <copy todir="${install.deploy.pos.dir}/logs" file="ant.install.properties" failonerror="false" overwrite="true" verbose="${installer.verbose}"/>

        <antcall target="set-file-attributes" inheritRefs="true"/>

    </target>

    <target name="set-file-attributes">
        <!-- If file attributes have been set correctly already a message file will exist -->
        <!-- skip setting of file attributes if this has been done already -->
        <if>
            <not>
                <available file="${installer.staging.dir}/permsok.txt"/>
            </not>
            <then>

            <!-- set file permissions to the most restrictive -->
            <if>
                <istrue value="${installer.os.is-unix}"/>
                <then>
                    <!-- set the owner -->
                    <chown owner="${input.application.owner}">
                        <dirset dir="${input.install.directory}"/>
                        <fileset dir="${input.install.directory}">
                            <include name="**/*"/>
                        </fileset>
                    </chown>
                    <!-- recursively set all files readonly by owner -->
                    <chmod perm="400">
                        <dirset dir="${input.install.directory}"/>
                        <fileset dir="${input.install.directory}">
                            <include name="**/*"/>
                        </fileset>
                    </chmod>

                    <!-- set files writable -->
                    <chmod perm="u+w">
                        <fileset refid="post-install.writable.filesets"/>
                    </chmod>

                    <!-- if rsa is enabled, set files which rsa modifies to writable -->
                    <if>
                        <istrue value="${install.is-rsa-encryption-enabled}"/>
                        <then>
                            <chmod perm="u+w">
                                <fileset refid="post-install.writable.rsa.filesets"/>
                            </chmod>
                        </then>
                    </if>

                    <!-- set files executable -->
                    <chmod perm="u+x">
                        <dirset dir="${input.install.directory}"/>
                        <fileset dir="${input.install.directory}">
                            <include name="**/*.sh"/>
                        </fileset>
                    </chmod>
                </then>
            </if>
            <if>
                <istrue value="${installer.os.is-windows}"/>
                <then>

                    <!-- recursively set all files read only -->
                    <attrib readonly="true">
                        <fileset dir="${input.install.directory}">
                            <include name="**/*"/>
                        </fileset>
                    </attrib>

                    <!-- set specific necessary files to writable -->
                    <attrib readonly="false">
                        <fileset refid="post-install.writable.filesets"/>
                    </attrib>

                    <!-- if rsa is enabled, set files which rsa modifies to writable -->
                    <if>
                        <istrue value="${install.is-rsa-encryption-enabled}"/>
                        <then>
                            <attrib readonly="false">
                                <fileset refid="post-install.writable.rsa.filesets"/>
                            </attrib>
                        </then>
                    </if>

                </then>
            </if>
            </then>
        </if>
        <!-- After successful completion drop a file in the installation directory -->
        <!-- if no ${installer.staging.dir} then create it -->
        <mkdir dir="${installer.staging.dir}"/>
        <touch file="${installer.staging.dir}/permsok.txt"/>

    </target>

    <target name="install-stage-bat-files">
        <replace dir="${installer.staging.dir}" summary="true">
            <include name="*.bat"/>
            <replacefilter token="Program Files" value="progra~1"/>
        </replace>
    </target>
    <target name="install-config-jre">
        <!-- Make a one-time backup of the JRE's original java.policy/java.security files; subsequent installs will not overwrite this -->
        <copy tofile="${input.jre.directory}/lib/security/java.policy.original" file="${input.jre.directory}/lib/security/java.policy" overwrite="false" verbose="${installer.verbose}"/>
        <copy tofile="${input.jre.directory}/lib/security/java.security.original" file="${input.jre.directory}/lib/security/java.security" overwrite="false" verbose="${installer.verbose}"/>
        <!-- Backup the current java.policy and java.security files in the JRE selected for the install -->
        <copy tofile="${input.jre.directory}/lib/security/java.policy.bak" file="${input.jre.directory}/lib/security/java.policy" overwrite="true" verbose="${installer.verbose}"/>
        <copy tofile="${input.jre.directory}/lib/security/java.security.bak" file="${input.jre.directory}/lib/security/java.security" overwrite="true" verbose="${installer.verbose}"/>
        <!-- Update java.policy -->
        <copy tofile="${input.jre.directory}/lib/security/java.policy" file="${installer.staging.common.dir}/jre_adjustments/lib/security/java.policy" overwrite="true" verbose="${installer.verbose}"/>
        <!-- Make JRE-Vendor-specific updates to the files -->
        <antcall target="install-config-jre-sun" inheritRefs="true"/>
        <antcall target="install-config-jre-ibm" inheritRefs="true"/>
        <!-- Replace tokens in the java.policy/java.security files -->
        <replace dir="${input.jre.directory}/lib/security" summary="true">
            <include name="java.security"/>
            <include name="java.policy"/>
            <replacefilter token="$USER_INSTALL_DIR$" value="${input.install.directory}"/>
        </replace>
        <replace dir="${input.jre.directory}/lib/security" summary="true">
            <include name="java.security"/>
            <replacefilter token="\" value="/"/>
        </replace>
        <replace dir="${installer.staging.common.dir}/jre_adjustments/lib/security" summary="true">
            <include name="java.security.ibm"/>
            <include name="java.security.sun"/>
            <replacefilter token="$USER_INSTALL_DIR$" value="${input.install.directory}"/>
            <replacefilter token="\" value="/"/>
        </replace>
    </target>
    <target name="install-config-jre-sun" if="install.is-jre-vendor-sun">
        <!-- Update java.security for Sun JRE -->
        <copy tofile="${input.jre.directory}/lib/security/java.security" file="${installer.staging.common.dir}/jre_adjustments/lib/security/java.security.sun" overwrite="true" verbose="${installer.verbose}"/>
    </target>
    <target name="install-config-jre-ibm" if="install.is-jre-vendor-ibm">
        <!-- Update java.security for IBM JRE -->
        <copy tofile="${input.jre.directory}/lib/security/java.security" file="${installer.staging.common.dir}/jre_adjustments/lib/security/java.security.ibm" overwrite="true" verbose="${installer.verbose}"/>
    </target>
    <target name="install-deploy">
        <!-- Copy the staged files to the destination -->
        <mkdir dir="${input.install.directory}"/>
        <copy todir="${input.install.directory}" failonerror="true" verbose="${installer.verbose}" preservelastmodified="true" includeemptydirs="true">
            <fileset refid="staging.install.fileset"/>
        </copy>
    </target>
    <target name="validate" depends="init,validate-install-dir,validate-jre"/>
    <target name="validate-jre">
    <!-- if ../bin and ../jre exist we are likely in a jdk, go up one more dir to see if we are in an appserver -->
    <condition property="not.standalone.jre">
        <and>
            <available file="${input.jre.directory}/../bin"/>
            <available file="${input.jre.directory}/../jre"/>
        </and>
    </condition>
        <if>
           <isset property="not.standalone.jre" />
           <then>
               <fail message="${input.jre.directory} appears to be located under the the application server. You must use a non appserver JRE.">
                   <condition>
                        <or>
                            <available file="${input.jre.directory}/../../wlserver_10.3"/>
                            <available file="${input.jre.directory}/../../installableApps"/>
                        </or>
                   </condition>
               </fail>
           </then>
        </if>

        <fail message="java.policy file not located under ${input.jre.directory}/lib/security" >
            <condition>
                <not>
                    <available file="${input.jre.directory}/lib/security/java.policy" />
                </not>
            </condition>
        </fail>
    </target>
    <target name="validate-install-dir">
        <!-- Either the install destination directory must be non-existent or it must be empty -->
        <!-- Test if the directory exists -->
        <condition property="install.does-install-dir-exist">
            <available file="${input.install.directory}" type="dir"/>
        </condition>
        <!-- if the directory exists make sure its empty -->
        <if>
            <istrue value="${install.does-install-dir-exist}"/>
            <then>
                <fileset id="install.dir.fileset" dir="${input.install.directory}"/>
                <condition property="install.is-install-dir-empty">
                    <length length="0">
                        <fileset refid="install.dir.fileset"/>
                    </length>
                </condition>
                <if>
                    <not><istrue value="${install.is-install-dir-empty}"/></not>
                    <then>
                        <fail>Aborting install - installation directory &apos;${input.install.directory}&apos; directory contains files. Please reinstall and do of the following: a) Select a different install directory; b) Remove all files from the current install directory.</fail>
                    </then>
                </if>
            </then>
        </if>
    </target>
    <target name="install-stage-init">
        <!-- clean out files from the stage folder from a previous install -->
        <delete dir="${installer.staging.dir}" quiet="true"/>
        <mkdir dir="${installer.staging.dir}"/>
        <!-- create the top-level folders for each component -->
        <mkdir dir="${installer.staging.pos.dir}"/>    <!-- The "pos" subdir -->
        <mkdir dir="${installer.staging.common.dir}"/>  <!-- The "common" subdir -->
    </target>
    <target name="install-stage-common" depends="install-stage-init">
        <delete dir="${installer.staging.common.dir}" quiet="true"/>
        <mkdir dir="${installer.staging.common.dir}"/>
        <!-- Copy over common files -->
        <copy todir="${installer.staging.common.dir}"
            includeemptydirs="true"
            overwrite="true"
            verbose="${installer.verbose}"
            preservelastmodified="true"
            filtering="true">
            <fileset refid="installer.common.base.fileset"/>
            <fileset refid="installer.shared.common.base.fileset"/>
        </copy>
        <!-- Copy instance of Ant for running dbbuild.bat or scratchpad.bat -->
        <if>
            <isset property="install.is-server-install"/>
            <then>
                <copy todir="${installer.staging.common.dir}/apache-ant"
                    includeemptydirs="true"
                    overwrite="true"
                    verbose="${installer.verbose}"
                    preservelastmodified="true"
                    filtering="true">
                    <fileset dir="ant"/>
                </copy>
                <copy todir="${installer.staging.common.dir}/apache-ant/lib"
                    overwrite="true"
                    verbose="${installer.verbose}"
                    preservelastmodified="true"
                    filtering="true">
                    <fileset file="${installer.product.common.dir}/db/lib/ant-contrib-1.0b3.jar"/>
                </copy>
            </then>
        </if>
        <!-- Copy CSF Jars -->
        <copy todir="${installer.staging.common.dir}"
            includeemptydirs="true"
            overwrite="true"
            verbose="${installer.verbose}"
            preservelastmodified="true"
            filtering="true">
            <fileset refid="installer.common.csf.fileset"/>
        </copy>
        <copy todir="${installer.staging.common.dir}/lib/ext"
            includeemptydirs="true"
            overwrite="true"
            flatten="true"
            verbose="${installer.verbose}"
            preservelastmodified="true"
            filtering="true">
            <fileset refid="installer.common.xerces.fileset"/>
        </copy>
        <if>
            <istrue value="${install.is-rm-install}" />
            <then>
                <!-- Copy axis2 Jars -->
                <copy todir="${installer.staging.common.dir}"
                    includeemptydirs="true"
                    overwrite="true"
                    verbose="${installer.verbose}"
                    preservelastmodified="true"
                    filtering="true">
                    <fileset refid="installer.common.axis2.fileset"/>
                </copy>
            </then>
        </if>
        <if>
            <and>
                <istrue value="${install.is-rm-install}" />
                <istrue value="${install.is-server-install}"/>
            </and>
            <then>
                <!-- Copy oracle.retail.posrm jars -->
                <copy todir="${installer.staging.pos.dir}/lib"
                    includeemptydirs="true"
                    overwrite="true"
                    verbose="${installer.verbose}"
                    preservelastmodified="true"
                    filtering="true">
                    <fileset refid="installer.server.rm.fileset"/>
                </copy>
           </then>
        </if>
        <if>
            <istrue value="${install.is-rsa-encryption-enabled}" />
            <then>
                <copy todir="${installer.staging.common.dir}"
                    includeemptydirs="true"
                    overwrite="true"
                    verbose="${installer.verbose}"
                    preservelastmodified="true"
                    filtering="true">
                    <fileset refid="installer.common.rsa.fileset"/>
                </copy>
                <copy todir="${installer.staging.pos.config.dir}"
                    includeemptydirs="true"
                    overwrite="true"
                    verbose="${installer.verbose}"
                    preservelastmodified="true"
                    filtering="true">
                    <fileset refid="installer.config.rsa.fileset"/>
                </copy>
                  <!-- copying RSA libraries that user entered from installer -->
                <copy todir="${installer.staging.common.dir}/lib"
                    includeemptydirs="true"
                    overwrite="true"
                    verbose="${installer.verbose}"
                    preservelastmodified="true"
                    filtering="true">
                      <fileset refid="installer.common.rsa.userinput.fileset"/>
                </copy>
            </then>
        </if>
        <if>
             <istrue value="${install.is-billpay-install}" />
             <then>
                 <copy todir="${installer.staging.common.dir}/lib"
                    includeemptydirs="true"
                    overwrite="true"
                    verbose="${installer.verbose}"
                    preservelastmodified="true"
                    filtering="true">
                    <fileset refid="installer.common.billpay.fileset"/>
                </copy>
            </then>
        </if>
        <if>
            <istrue value="${install.is-item-basket-install}" />
            <then>
                <copy todir="${installer.staging.pos.dir}/lib"
                    includeemptydirs="true"
                    overwrite="true"
                    verbose="${installer.verbose}"
                    preservelastmodified="true"
                    filtering="true">
                    <fileset refid="installer.common.inventory.inquiry.fileset"/>
                </copy>
            </then>
        </if>
        <if>
            <istrue value="${install.is-sim-server-install}"/>
            <then>
                <!-- sim server files -->
                <copy todir="${installer.staging.common.dir}/lib/ext"
                    includeemptydirs="true"
                    overwrite="true"
                    verbose="${installer.verbose}"
                    preservelastmodified="true"
                    filtering="true">
                    <fileset refid="installer.common.sim.fileset"/>
                </copy>
                <if>
                    <istrue value="${input.is.ws.passwd.enabled}"/>
                    <then>
                        <copy todir="${installer.staging.common.dir}/lib/ext"
                            includeemptydirs="true"
                            overwrite="true"
                            verbose="${installer.verbose}"
                            preservelastmodified="true"
                            filtering="true">
                            <fileset refid="installer.common.sim.stub.secure.fileset"/>
                        </copy>
                    </then>
                    <else>
                        <copy todir="${installer.staging.common.dir}/lib/ext"
                            includeemptydirs="true"
                            overwrite="true"
                            verbose="${installer.verbose}"
                            preservelastmodified="true"
                            filtering="true">
                            <fileset refid="installer.common.sim.stub.fileset"/>
                        </copy>
                    </else>
                </if>
                <if>
                    <istrue value="${install.is-inventory-inquiry-install}" />
                    <then>
                        <copy todir="${installer.staging.pos.dir}/lib"
                            includeemptydirs="true"
                            overwrite="true"
                            verbose="${installer.verbose}"
                            preservelastmodified="true"
                            filtering="true">
                            <fileset refid="installer.common.inventory.inquiry.fileset"/>
                        </copy>
                    </then>
                </if>
                <if>
                    <istrue value="${install.is-inventory-reservation-install}" />
                    <then>
                        <copy todir="${installer.staging.pos.dir}/lib"
                            includeemptydirs="true"
                            overwrite="true"
                            verbose="${installer.verbose}"
                            preservelastmodified="true"
                            filtering="true">
                            <fileset refid="installer.common.inventory.inquiry.fileset"/>
                        </copy>
                    </then>
                </if>
                <if>
                    <istrue value="${install.is-inventory-update-install}" />
                    <then>
                        <copy todir="${installer.staging.pos.dir}/lib"
                            includeemptydirs="true"
                            overwrite="true"
                            verbose="${installer.verbose}"
                            preservelastmodified="true"
                            filtering="true">
                            <fileset refid="installer.common.inventory.inquiry.fileset"/>
                        </copy>
                    </then>
                </if>
            </then>
            <elseif>
                <istrue value="${install.is-sim-client-install}"/>
                <then>
                    <!-- sim client files -->
                    <copy todir="${installer.staging.pos.dir}/lib"
                        includeemptydirs="true"
                        overwrite="true"
                        verbose="${installer.verbose}"
                        preservelastmodified="true"
                        filtering="true">
                        <fileset refid="installer.common.sim.client.fileset"/>
                    </copy>
                </then>
            </elseif>
        </if>
        <if>
            <istrue value="${install.is-server-install}"/>
            <then>
                <antcall target="install-stage-common-db-oracle" inheritRefs="true"/>
                <antcall target="install-stage-common-db-db2" inheritRefs="true"/>
            </then>
        </if>
        <antcall target="install-stage-common-db-offline" inheritRefs="true"/>
    </target>
    <target name="install-stage-common-db-oracle" if="install.is-db-oracle" />
    <target name="install-stage-common-db-db2" if="install.is-db-db2">
        <!-- update db2_builddb.bat -->
        <replace file="${installer.staging.common.db.dir}/db2/db2_builddb.${installer.os.script.ext}" token="SNIFFED_HOSTNAME" value="${installer.os.hostname}"  summary="true"/>
        <!-- update db2_builddb.sh -->
        <replace file="${installer.staging.common.db.dir}/db2/db2_builddb.${installer.os.script.ext}" token="SNIFFED_HOSTNAME" value="${installer.os.hostname}"  summary="true"/>
    </target>
    <target name="install-stage-common-db-offline">
        <replace file="${installer.staging.common.db.dir}/sql/offline/Create/CreateSchema.sql" token="@configured.store.id@" value="${input.configured.store.id}" summary="true"/>
        <replace file="${installer.staging.common.db.dir}/sql/offline/default/InsertTableIDDIDataSet.sql" token="@configured.store.id@" value="${input.configured.store.id}" summary="true"/>
    </target>
    <target name="install-stage-jars">
        <antcall target="install-stage-jars-transaction-retrieval" inheritRefs="true"/>
    </target>
    <target name="install-stage-jars-transaction-retrieval" if="install.are-transaction-retrieval-jars-required">
        <copy todir="${installer.staging.common.dir}/lib" file="${input.transaction.retrieval.transaction-jar.location}" overwrite="true" verbose="${installer.verbose}"/>
        <copy todir="${installer.staging.common.dir}/lib" file="${input.transaction.retrieval.customer-jar.location}" overwrite="true" verbose="${installer.verbose}"/>
    </target>
    <target name="install-stage-pos" depends="install-stage-pos-bin,install-stage-pos-lib,install-stage-pos-receipts,install-stage-pos-config,install-stage-pos-misc"/>
    <target name="install-stage-pos-bin">
        <delete dir="${installer.staging.pos.bin.dir}" quiet="true"/>
        <mkdir dir="${installer.staging.pos.bin.dir}"/>
        <!-- copy the POS scripts in bin/ to pos/bin-->
        <copy todir="${installer.staging.pos.bin.dir}"
            overwrite="true"
            includeemptydirs="true"
            preservelastmodified="true"
            verbose="${installer.verbose}">
            <fileset refid="installer.pos.bin.fileset"/>
            <fileset refid="installer.shared.pos.bin.fileset"/>
        </copy>
       <!-- Copy csf config files to pos/bin -->
        <copy todir="${installer.staging.pos.bin.dir}"
            overwrite="true"
            includeemptydirs="true"
            preservelastmodified="true"
            verbose="${installer.verbose}">
            <fileset refid="installer.pos.csfconfig.fileset"/>
        </copy>
        <if>
            <istrue value="${install.is-server-install}"/>
            <then>
                <!-- perform string substitution in the scripts -->
                <antcall target="install-stage-pos-bin-dbbuild" inheritRefs="true"/>
                <!-- create the pos/bin/POSLog folders -->
                <mkdir dir="${installer.staging.pos.bin.dir}/POSLog"/>
                <mkdir dir="${installer.staging.pos.bin.dir}/POSLogBackup"/>
                <!-- perform string substitution in properties files -->
                <antcall target="install-stage-pos-bin-db-xml" inheritRefs="true"/>
                <antcall target="install-stage-pos-bin-db-properties" inheritRefs="true"/>
                <!-- perform string substitution in the scripts -->
                <antcall target="install-stage-pos-bin-cert-pos" inheritRefs="true"/>
            </then>
        </if>
        <antcall target="install-stage-pos-bin-posenv" inheritRefs="true"/>
        <!-- perform string substitution in properties files -->
        <antcall target="install-stage-pos-bin-jndi-properties" inheritRefs="true"/>
        <antcall target="install-stage-pos-bin-comm-properties" inheritRefs="true"/>
    </target>

    <target name="install-stage-pos-bin-cert-pos">
        <if>
            <isset property="input.ssl.keystore.location"/>
            <then>
                <copy file="${installer.staging.pos.bin.dir}/cert-production.sh" tofile="${installer.staging.pos.bin.dir}/cert-keystore.sh"  failonerror="false">
                    <filterset>
                        <filter token="JAVA_HOME" value="${env.JAVA_HOME}"/>
                        <filter token="KEYSTORE" value="${escaped.ssl.keystore.location}"/>
                      </filterset>
                </copy>
                <copy file="${installer.staging.pos.bin.dir}/cert-production.cmd" tofile="${installer.staging.pos.bin.dir}/cert-keystore.cmd" failonerror="false">
                    <filterset>
                        <filter token="JAVA_HOME" value="${env.JAVA_HOME}"/>
                        <filter token="KEYSTORE" value="${escaped.ssl.keystore.location}"/>
                      </filterset>
                </copy>
            </then>
        </if>
        <if>
            <isset property="input.ssl.truststore.location"/>
            <then>
                <copy file="${installer.staging.pos.bin.dir}/cert-production.sh" tofile="${installer.staging.pos.bin.dir}/cert-truststore.sh"  failonerror="false">
                    <filterset>
                        <filter token="JAVA_HOME" value="${env.JAVA_HOME}"/>
                        <filter token="KEYSTORE" value="${escaped.ssl.truststore.location}"/>
                      </filterset>
                </copy>
                <copy file="${installer.staging.pos.bin.dir}/cert-production.cmd" tofile="${installer.staging.pos.bin.dir}/cert-truststore.cmd" failonerror="false">
                    <filterset>
                        <filter token="JAVA_HOME" value="${env.JAVA_HOME}"/>
                        <filter token="KEYSTORE" value="${escaped.ssl.truststore.location}"/>
                      </filterset>
                </copy>
            </then>
        </if>
        <if>
            <istrue value="${install.is-appserver-WAS}"/>
            <then>
                <replace dir="${installer.staging.dir}" includes="${installer.staging.pos.bin.dir}/cert-truststore.*,${installer.staging.pos.bin.dir}/cert-keystore.*">
                    <replacefilter token="#WAS " value=""/>
                    <replacefilter token="REM WAS " value=""/>
                </replace>
            </then>
            <else>
                <replace dir="${installer.staging.dir}" includes="${installer.staging.pos.bin.dir}/cert-truststore.*,${installer.staging.pos.bin.dir}/cert-keystore.*">
                    <replacefilter token="#NOTWAS " value=""/>
                    <replacefilter token="REM NOTWAS " value=""/>
                </replace>
            </else>
        </if>
    </target>

    <target name="install-stage-pos-bin-dbbuild">
        <!-- Update dbbuild.bat/sh -->
        <replace file="${installer.staging.pos.bin.dir}/dbbuild.${installer.os.script.ext}"  summary="true">
            <replacefilter token="$JRE_LOCATION$" value="${input.jre.directory}"/>
        </replace>
    </target>
    <target name="install-stage-pos-bin-posenv">
        <if>
            <istrue value="${installer.os.is-unix}"/>
            <then>
                <!-- Specific updates for posenv.sh -->
                <replace file="${installer.staging.pos.bin.dir}/posenv.sh" summary="true">
                    <replacefilter token="$KEYSTORE_CLASSPATH$" value="${install.keystore.classpath-property.unix}"/>
                     <replacefilter token="$JPOSLIB_CLASSPATH$" value="${install.jpos.classpath-property.unix}"/>
                    <replacefilter token="$JPOSXML_CLASSPATH$" value="${install.jposxml.classpath-property.unix}"/>
                    <replacefilter token="$DPFINGERPRINT_CLASSPATH$" value="${install.dpfingerprint.classpath-property.unix}"/>
                </replace>
            </then>
            <else>
                <!-- Specific updates for posenv.bat -->
                <replace file="${installer.staging.pos.bin.dir}/posenv.bat" summary="true">
                    <replacefilter token="$KEYSTORE_CLASSPATH$" value="${install.keystore.classpath-property.windows}"/>
                    <replacefilter token="$JPOSLIB_CLASSPATH$" value="${install.jpos.classpath-property.windows}"/>
                    <replacefilter token="$JPOSXML_CLASSPATH$" value="${install.jposxml.classpath-property.windows}"/>
                    <replacefilter token="$DPFINGERPRINT_CLASSPATH$" value="${install.dpfingerprint.classpath-property.windows}"/>
                </replace>
            </else>
        </if>

        <!-- update posenv for ISD libraries -->
        <if>
            <istrue value="${install.is-tender-authorization-isd}"/>
            <then>
                <if>
                    <istrue value="${installer.os.is-unix}"/>
                    <then>
                        <replace file="${installer.staging.pos.bin.dir}/posenv.sh" summary="true">
                            <replacefilter token="# REM ISD INSTALL" value=""/>
                            <replacefilter token="$ISD_IMSRTRIBSPECSDK_JAR$" value="${input.tender.authorization.pincomm.jar.imsrtribspecsdk}"/>
                            <replacefilter token="$ISD_MSPCOMMAPI_JAR$" value="${input.tender.authorization.pincomm.jar.mspcommapi}"/>
                            <replacefilter token="$ISD_ISDCRYPT_JAR$" value="${input.tender.authorization.pincomm.jar.isdcrypt}"/>
                        </replace>
                    </then>
                    <else>
                        <replace file="${installer.staging.pos.bin.dir}/posenv.bat" summary="true">
                            <replacefilter token="REM ISD INSTALL" value=""/>
                            <replacefilter token="$ISD_IMSRTRIBSPECSDK_JAR$" value="${input.tender.authorization.pincomm.jar.imsrtribspecsdk}"/>
                            <replacefilter token="$ISD_MSPCOMMAPI_JAR$" value="${input.tender.authorization.pincomm.jar.mspcommapi}"/>
                            <replacefilter token="$ISD_ISDCRYPT_JAR$" value="${input.tender.authorization.pincomm.jar.isdcrypt}"/>
                        </replace>
                    </else>
                </if>
            </then>
        </if>

        <!-- Common updates for both posenv.bat and posenv.sh -->
        <replace dir="${installer.staging.pos.bin.dir}" summary="true">
            <include name="posenv.${installer.os.script.ext}"/>
            <replacefilter token="$JRE_LOCATION$" value="${input.jre.directory}"/>
            <replacefilter token="$DOLLAR$" value="$"/>
        </replace>
        <replace dir="${installer.staging.pos.bin.dir}" summary="true">
            <include name="posenv.${installer.os.script.ext}"/>
            <replacefilter token="$HP_ENV_CLASSPATH$" value="${install.hpenv.classpath-property}"/>
            <replacefilter token="$IBM_ENV_CLASSPATH$" value="${install.ibmenv.classpath-property}"/>
        </replace>
        <!-- Make platform-specific updates to posenv.sh/posenv.bat as necessary -->
        <antcall target="install-stage-pos-bin-posenv-oracle" inheritRefs="true"/>
        <antcall target="install-stage-pos-bin-posenv-ibm" inheritRefs="true"/>
        <!-- Strip remaining IA variable/Ant property refs from posenv.bat/posenv.sh -->
        <remove-IA-variable-refs file="${installer.staging.pos.bin.dir}/posenv.${installer.os.script.ext}"/>
        <remove-ant-property-refs file="${installer.staging.pos.bin.dir}/posenv.${installer.os.script.ext}"/>
    </target>
    <target name="install-stage-pos-bin-posenv-oracle" if="install.is-db-oracle">
        <replace dir="${installer.staging.pos.bin.dir}" summary="true">
            <include name="posenv.${installer.os.script.ext}"/>
            <replacefilter token="$USER_MAGIC_FOLDER_2$" value="${install.db.dir}"/>
            <replacefilter token="$DB_JDBC_JAR$" value="${input.db.jdbc.jar}"/>
        </replace>
    </target>
    <target name="install-stage-pos-bin-posenv-ibm" if="install.is-db-db2">
        <replace dir="${installer.staging.pos.bin.dir}" summary="true">
            <include name="posenv.${installer.os.script.ext}"/>
            <replacefilter token="$USER_MAGIC_FOLDER_2$" value="${install.db.dir}"/>
            <replacefilter token="$DB_JDBC_JAR$" value="${input.db.jdbc.jar}"/>
            <replacefilter token="$DB_JDBC_JAR2$" value="${input.db.jdbc.jar2}"/>
        </replace>
    </target>
    <target name="install-stage-pos-bin-comm-properties">
        <replace file="${installer.staging.pos.bin.dir}/comm.properties" summary="true">
            <replacefilter token="$IA_CO_SERVER_NAME$" value="${input.co.hostname}"/>
        </replace>
        <replaceregexp file="${installer.staging.pos.bin.dir}/comm.properties" match="comm.jms.ssl.ciphersuite.level=NOSSL" replace="comm.jms.ssl.ciphersuite.level=${input.jms.ssl.level}" flags="gi" />
        <if>
            <and>
                <istrue value="${install.is-client-install}"/>
                <istrue value="${install.is-rmi-timeout-enabled}"/>
                <or>
                    <istrue value="${install.is-transaction-retrieval-location-central}"/>
                    <istrue value="${install.is-transaction-retrieval-location-central-local-failover}"/>
                </or>
            </and>
            <then>
                <replace file="${installer.staging.pos.bin.dir}/comm.properties" summary="true">
                    <replacefilter token="#comm.socket.readTimeout=25000" value="comm.socket.readTimeout=25000"/>
                    <replacefilter token="#comm.socket.connectTimeout=5000" value="comm.socket.connectTimeout=5000"/>
                </replace>
            </then>
        </if>
        <!-- if we are on WAS replace $JMS_TCF token with jms/ApplicationTCF -->
        <if>
            <istrue value="${install.is-appserver-WAS}"/>
            <then>
                <replace file="${installer.staging.pos.bin.dir}/comm.properties" summary="true">
                   <replacefilter token="$JMS_TCF" value="jms/ApplicationTCF" />
                </replace>
            </then>
            <elseif>
            <!-- if we are on OAS replace $JMS_TCF token with jms/ApplicationTCFNONXA -->
                <istrue value="${install.is-appserver-WL}"/>
            <then>
                <replace file="${installer.staging.pos.bin.dir}/comm.properties" summary="true">
                    <replacefilter token="$JMS_TCF" value="jms/ApplicationTCF"/>
                </replace>
            </then>
            </elseif>
            <elseif>
            <!-- if we are on OAS replace $JMS_TCF token with jms/ApplicationTCFNONXA -->
                <istrue value="${install.is-appserver-OAS}"/>
            <then>
                <replace file="${installer.staging.pos.bin.dir}/comm.properties" summary="true">
                    <replacefilter token="$JMS_TCF" value="jms/ApplicationTCFNONXA"/>
                </replace>
            </then>
            </elseif>
        </if>
        <!-- Set the classpath for the IBM Jars for JNDI, JMS, WAS RUNTIME -->
        <if>
            <istrue value="${install.is-appserver-WAS}"/>
            <then>
                <replace file="${installer.staging.pos.bin.dir}/posenv.sh" summary="true">
                   <replacefilter token="$WAS_JARS" value="${input.was.jars.dir.location}" />
                   <replacefilter token="$MQ_JARS" value="${input.mq.jars.dir.location}" />
                </replace>
            </then>
        </if>
    </target>
    <target name="install-stage-pos-bin-jndi-properties">
        <if>
            <isset property="install.is-client-install"/>
            <then>
                <!-- updates common to all appserver platforms -->
                <replace file="${installer.staging.pos.bin.dir}/jndi.properties" summary="true">
                    <replacefilter token="localhost" value="${input.bo.hostname}"/>
                    <replacefilter token="store_server_port_number" value="${input.bo.jndi-port}"/>
                    <replacefilter token="store_server_host_name" value="${input.bo.hostname}"/>
                    <replacefilter token="&quot;" value=""/>
                    <replacefilter token="$IA_BO_SERVER_NAME$" value="${input.bo.hostname}"/>
                    <replacefilter token="$IA_BO_PORT_NAME$" value="${input.bo.jndi-port}"/>
                    <replacefilter token="$IA_BO_APP_NAME$" value=""/>
                    <replacefilter token="$APP_ADMIN_USERNAME$" value="${input.jms.username}"/>
                    <replacefilter token="$APP_ADMIN_PASSWORD$" value="${install.jms.password-property}"/>
                </replace>
            </then>
        </if>
        <if>
            <isset property="install.is-server-install"/>
            <then>
            <!-- updates common to all appserver platforms -->
            <replace file="${installer.staging.pos.bin.dir}/jndi.properties" summary="true">
                <replacefilter token="localhost" value="${input.bo.hostname}"/>
                <replacefilter token="store_server_port_number" value="${input.bo.jndi-port}"/>
                <replacefilter token="store_server_host_name" value="${input.bo.hostname}"/>
                <replacefilter token="&quot;" value=""/>
                <replacefilter token="$IA_BO_SERVER_NAME$" value="${input.bo.hostname}"/>
                <replacefilter token="$IA_BO_PORT_NAME$" value="${input.bo.jndi-port}"/>
                <replacefilter token="$IA_BO_APP_NAME$" value="/${input.bo.app.name}"/>
                <replacefilter token="$APP_ADMIN_USERNAME$" value="${input.app.admin.username}"/>
                <replacefilter token="$APP_ADMIN_PASSWORD$" value="${install.app.admin.password-property}"/>
            </replace>
        </then>
        </if>
        <!-- Perform appserver-specific replacements -->
        <antcall target="install-stage-pos-bin-jndi-properties-was" inheritRefs="true"/>
        <antcall target="install-stage-pos-bin-jndi-properties-wl" inheritRefs="true"/>
        <antcall target="install-stage-pos-bin-jndi-properties-oas" inheritRefs="true"/>
    </target>
    <target name="install-stage-pos-bin-jndi-properties-was" if="install.is-appserver-WAS">
        <replace file="${installer.staging.pos.bin.dir}/jndi.properties" summary="true">
            <replacefilter token="#WAS " value=""/>
        </replace>
    </target>
    <target name="install-stage-pos-bin-jndi-properties-wl" if="install.is-appserver-WL">
        <if>
            <or>
                <equals arg1="true" arg2="${input.client.wl.secure.bo}"/>
                <equals arg1="true" arg2="${input.server.wl.secure.bo}"/>
            </or>
            <then>
                <property name="bo.protocol" value="t3s"/>
                <replace file="${installer.staging.pos.bin.dir}/jndi.properties" summary="true">
                    <replacefilter token="#SSL " value=""/>
                </replace>
            </then>
            <else>
                <property name="bo.protocol" value="t3"/>
            </else>
        </if>
        <replace file="${installer.staging.pos.bin.dir}/jndi.properties" summary="true">
            <replacefilter token="#WL " value=""/>
            <replacefilter token="$WL_PROTOCOL$" value="${bo.protocol}"/>
        </replace>
    </target>
    <target name="install-stage-pos-bin-jndi-properties-oas" if="install.is-appserver-OAS">
        <replace file="${installer.staging.pos.bin.dir}/jndi.properties" summary="true">
            <replacefilter token="#OAS " value=""/>
        </replace>
    </target>
    <target name="install-stage-pos-bin-db-xml">
        <!-- Server-install-only updates -->
        <if>
            <istrue value="${install.is-server-install}"/>
            <then>
                <replace file="${installer.staging.pos.bin.dir}/db.xml" summary="true">
                    <replacefilter token="$DB_VENDOR$" value="${input.db.type}"/>
                </replace>
            </then>
        </if>
    </target>
    <target name="install-stage-pos-bin-db-properties">
        <!-- Common updates -->
        <replace file="${installer.staging.pos.bin.dir}/db.properties" summary="true">
            <replacefilter token="$USER_INSTALL_DIR$" value="${input.install.directory}"/>
            <replacefilter token="$APP_SERVER_VENDER$" value=""/>
            <replacefilter token="$JBOSS_J2EE_JAR$" value=""/>
            <replacefilter token="$STORE_ID_NUMBER_FINAL$" value="${input.configured.store.id}"/>
            <replacefilter token="$DB_VAT_ENABLED$" value="${input.vat.enabled}"/>
            <replacefilter token="$GEN_LOCALES$" value="${gen.locales}"/>
        </replace>
        <!-- Server-install-only updates -->
        <if>
            <istrue value="${install.is-server-install}"/>
            <then>
                <replace file="${installer.staging.pos.bin.dir}/db.properties" summary="true">
                    <replacefilter token="$APP_ADMIN_USERNAME$" value="${input.app.admin.username}"/>
                    <replacefilter token="$APP_ADMIN_PASSWORD_ENCRYPTED$" value="${install.app.admin.password-property}"/>
                    <replacefilter token="$DB_VENDOR$" value="${input.db.type}"/>
                    <replacefilter token="$DB_PRODUCT$" value="${input.db.product}"/>
                    <replacefilter token="$DB_JDBC_DRIVER$" value="${input.db.jdbc.driver.class}"/>
                    <replacefilter token="$DB_JDBC_URL$" value="${input.db.jdbc.url}"/>
                    <replacefilter token="$DB_PATH$" value="${input.db.jdbc.driver.dir}"/>
                    <replacefilter token="$DB_JDBC_JAR$" value="${input.db.jdbc.jar}"/>
                    <replacefilter token="$DB_JDBC_JAR2$" value="${input.db.jdbc.jar2}"/>
                    <replacefilter token="$DB_USER$" value="${input.db.username}"/>
                    <replacefilter token="$DB_PASSWORD_ENCRYPTED$" value="${install.db.password-alias}"/>
                    <replacefilter token="$DB_OWNER_USER$" value="${input.db.owner.username}"/>
                    <replacefilter token="$DB_OWNER_PASSWORD_ENCRYPTED$" value="${install.db.owner.password-property}"/>
                    <replacefilter token="$DB_STANDARD_INSTALL_PATH$" value="${install.db.dir}"/>
                    <replacefilter token="$DB_ENCRYPT_CLASSPATH$" value="${install.db.encrypt.classpath-property}"/>
                    <replacefilter token="$ENT_DB_JDBC_DRIVER$" value="${input.scratchpad.db.jdbc.driver.class}"/>
                    <replacefilter token="$ENT_DB_JDBC_URL$" value="${input.scratchpad.db.jdbc.url}"/>
                    <replacefilter token="$ENT_DB_JDBC_PATH$" value="${input.scratchpad.db.jdbc.driver.dir}"/>
                    <replacefilter token="$ENT_DB_JDBC_JAR$" value="${input.scratchpad.db.jdbc.jar}"/>
                    <replacefilter token="$ENT_DB_JDBC_JAR2$" value="${input.scratchpad.db.jdbc.jar2}"/>
                    <replacefilter token="$ENT_DB_USER$" value="${input.scratchpad.db.username}"/>
                    <replacefilter token="$ENT_DB_PASSWORD_ENCRYPTED$" value="${install.scratchpad.db.password-property}"/>
                    <replacefilter token="$HASH_ALGORITHM$" value="${input.keystore.algorithm}"/>
                    <replacefilter token="$DATASET_SAMPLE_FILE$" value="${input.dataset.sample.file}"/>
                </replace>
            </then>
        </if>
        <!-- Common updates -->
        <replace file="${installer.staging.pos.bin.dir}/db.properties" summary="true">
            <replacefilter token="\" value="/"/>
        </replace>
        <!-- Perform DB-specific replacements -->
        <antcall target="install-stage-pos-bin-db-properties-db2" inheritRefs="true"/>
        <!-- Remove any undefined IA variables /Ant props -->
        <remove-IA-variable-refs file="${installer.staging.pos.bin.dir}/db.properties"/>
        <remove-ant-property-refs file="${installer.staging.pos.bin.dir}/db.properties"/>
    </target>
    <target name="install-stage-pos-bin-db-properties-db2" if="install.is-db-db2">
        <replace file="${installer.staging.pos.bin.dir}/db.properties" summary="true">
            <replacefilter token="#inst.db.jdbc-jar" value="inst.db.jdbc-jar"/>
        </replace>
    </target>
    <!-- Prepare the pos/lib directory for pos installation. -->
    <target name="install-stage-pos-lib">
        <!-- Create pos/lib folder -->
        <mkdir dir="${installer.staging.pos.dir}/lib"/>
        <!-- Copy the locale-specific jars over -->
        <antcall target="install-stage-pos-lib-locales" inheritRefs="true"/>
        <!-- copy the POS jars in lib/ to pos/lib/ -->
        <copy todir="${installer.staging.pos.dir}/lib" overwrite="true" includeemptydirs="true"
            preservelastmodified="true" verbose="${installer.verbose}" flatten="true">
            <fileset refid="installer.pos.lib.jars.fileset"/>
        </copy>
    </target>
    <target name="install-stage-pos-lib-locales">
        <!-- Create pos/lib/locales folder -->
        <mkdir dir="${installer.staging.pos.dir}/lib/locales"/>
        <!-- Copy the jars for the supported locales to pos/lib/locales -->
        <if>
            <istrue value="${input.en}"/>
            <then>
                <copy todir="${installer.staging.pos.dir}/lib/locales" overwrite="true" flatten="true" includeemptydirs="true" preservelastmodified="true" verbose="${installer.verbose}">
                    <fileset refid="installer.pos.lib.locale.en.fileset"/>
                </copy>
            </then>
        </if>
        <if>
            <istrue value="${input.de}"/>
            <then>
                <copy todir="${installer.staging.pos.dir}/lib/locales" overwrite="true" flatten="true" includeemptydirs="true" preservelastmodified="true" verbose="${installer.verbose}">
                    <fileset refid="installer.pos.lib.locale.de.fileset"/>
                </copy>
            </then>
        </if>
        <if>
            <istrue value="${input.fr}"/>
            <then>
                <copy todir="${installer.staging.pos.dir}/lib/locales" overwrite="true" flatten="true" includeemptydirs="true" preservelastmodified="true" verbose="${installer.verbose}">
                    <fileset refid="installer.pos.lib.locale.fr.fileset"/>
                </copy>
            </then>
        </if>
        <if>
            <istrue value="${input.es}"/>
            <then>
                <copy todir="${installer.staging.pos.dir}/lib/locales" overwrite="true" flatten="true" includeemptydirs="true" preservelastmodified="true" verbose="${installer.verbose}">
                    <fileset refid="installer.pos.lib.locale.es.fileset"/>
                </copy>
            </then>
        </if>
        <if>
            <istrue value="${input.ja}"/>
            <then>
                <copy todir="${installer.staging.pos.dir}/lib/locales" overwrite="true" flatten="true" includeemptydirs="true" preservelastmodified="true" verbose="${installer.verbose}">
                    <fileset refid="installer.pos.lib.locale.ja.fileset"/>
                </copy>
            </then>
        </if>
        <if>
            <istrue value="${input.ja}"/>
            <then>
                  <copy todir="${installer.staging.pos.dir}/lib/locales" overwrite="true" flatten="true" includeemptydirs="true" preservelastmodified="true" verbose="${installer.verbose}">
                      <fileset refid="installer.pos.lib.locale.ja.fileset"/>
                  </copy>
            </then>
        </if>
        <if>
            <istrue value="${input.ko}"/>
            <then>
                <copy todir="${installer.staging.pos.dir}/lib/locales" overwrite="true" flatten="true" includeemptydirs="true" preservelastmodified="true" verbose="${installer.verbose}">
                    <fileset refid="installer.pos.lib.locale.ko.fileset"/>
                </copy>
            </then>
        </if>
        <if>
            <istrue value="${input.ru}"/>
            <then>
                <copy todir="${installer.staging.pos.dir}/lib/locales" overwrite="true" flatten="true" includeemptydirs="true" preservelastmodified="true" verbose="${installer.verbose}">
                    <fileset refid="installer.pos.lib.locale.ru.fileset"/>
                </copy>
            </then>
        </if>
        <if>
            <istrue value="${input.zh}"/>
            <then>
                <copy todir="${installer.staging.pos.dir}/lib/locales" overwrite="true" flatten="true" includeemptydirs="true" preservelastmodified="true" verbose="${installer.verbose}">
                    <fileset refid="installer.pos.lib.locale.zh.fileset"/>
                </copy>
            </then>
        </if>
        <if>
            <istrue value="${input.zh_TW}"/>
            <then>
                <copy todir="${installer.staging.pos.dir}/lib/locales" overwrite="true" flatten="true" includeemptydirs="true" preservelastmodified="true" verbose="${installer.verbose}">
                    <fileset refid="installer.pos.lib.locale.zh_TW.fileset"/>
                </copy>
            </then>
        </if>
        <if>
            <istrue value="${input.pt}"/>
            <then>
                <copy todir="${installer.staging.pos.dir}/lib/locales" overwrite="true" flatten="true" includeemptydirs="true" preservelastmodified="true" verbose="${installer.verbose}">
                    <fileset refid="installer.pos.lib.locale.pt.fileset"/>
                </copy>
             </then>
        </if>
        <if>
            <istrue value="${input.it}"/>
            <then>
                <copy todir="${installer.staging.pos.dir}/lib/locales" overwrite="true" flatten="true" includeemptydirs="true" preservelastmodified="true" verbose="${installer.verbose}">
                    <fileset refid="installer.pos.lib.locale.it.fileset"/>
                </copy>
            </then>
        </if>



        <if>
            <istrue value="${input.tr}"/>
            <then>
                <copy todir="${installer.staging.pos.dir}/lib/locales" overwrite="true" flatten="true" includeemptydirs="true" preservelastmodified="true" verbose="${installer.verbose}">
                    <fileset refid="installer.pos.lib.locale.tr.fileset"/>
                </copy>
            </then>
        </if>
        <if>
            <istrue value="${input.hu}"/>
            <then>
                <copy todir="${installer.staging.pos.dir}/lib/locales" overwrite="true" flatten="true" includeemptydirs="true" preservelastmodified="true" verbose="${installer.verbose}">
                    <fileset refid="installer.pos.lib.locale.hu.fileset"/>
                </copy>
            </then>
        </if>
        <if>
            <istrue value="${input.nl}"/>
            <then>
                <copy todir="${installer.staging.pos.dir}/lib/locales" overwrite="true" flatten="true" includeemptydirs="true" preservelastmodified="true" verbose="${installer.verbose}">
                    <fileset refid="installer.pos.lib.locale.nl.fileset"/>
                </copy>
            </then>
        </if>
        <if>
            <istrue value="${input.el}"/>
            <then>
                <copy todir="${installer.staging.pos.dir}/lib/locales" overwrite="true" flatten="true" includeemptydirs="true" preservelastmodified="true" verbose="${installer.verbose}">
                    <fileset refid="installer.pos.lib.locale.el.fileset"/>
                </copy>
            </then>
        </if>
        <if>
            <istrue value="${input.pl}"/>
            <then>
                <copy todir="${installer.staging.pos.dir}/lib/locales" overwrite="true" flatten="true" includeemptydirs="true" preservelastmodified="true" verbose="${installer.verbose}">
                    <fileset refid="installer.pos.lib.locale.pl.fileset"/>
                </copy>
             </then>
        </if>
        <if>
            <istrue value="${input.sv}"/>
            <then>
                <copy todir="${installer.staging.pos.dir}/lib/locales" overwrite="true" flatten="true" includeemptydirs="true" preservelastmodified="true" verbose="${installer.verbose}">
                    <fileset refid="installer.pos.lib.locale.sv.fileset"/>
                </copy>
            </then>
        </if>
        <if>
            <istrue value="${input.hr}"/>
            <then>
                <copy todir="${installer.staging.pos.dir}/lib/locales" overwrite="true" flatten="true" includeemptydirs="true" preservelastmodified="true" verbose="${installer.verbose}">
                    <fileset refid="installer.pos.lib.locale.hr.fileset"/>
                </copy>
            </then>
        </if>


    </target>
    <target name="install-stage-pos-receipts" if="install.is-client-install">
        <!-- Create pos/receipts folder -->
        <mkdir dir="${installer.staging.pos.dir}/receipts"/>
        <!-- copy the receipts over -->
        <copy todir="${installer.staging.pos.dir}/receipts" overwrite="true" includeemptydirs="true" preservelastmodified="true" verbose="${installer.verbose}">
            <fileset refid="installer.pos.receipts.fileset"/>
        </copy>
        <!-- create data folder if not exist -->
         <condition property="install.does-install-receipts-dir-exist">
            <available file="${installer.staging.pos.receipts.printing.ipp.dir}" type="dir"/>
        </condition>
        <if>
            <istrue value="${install.does-install-receipts-dir-exist}"/>
            <then>
                <condition property="install.does-install-receipts-data-dir-exist">
                    <available file="${installer.staging.pos.receipts.printing.ipp.dir}/data" type="dir"/>
                </condition>
                <if>
                    <not>
                        <istrue value="${install.does-install-receipts-data-dir-exist}"/>
                    </not>
                    <then>
                          <mkdir dir="${installer.staging.pos.receipts.printing.ipp.dir}/data"/>
                    </then>
                </if>
            </then>
        </if>
    </target>
    <target name="install-stage-pos-misc">
        <!-- Create pos/logs folder -->
        <mkdir dir="${installer.staging.pos.dir}/logs"/>
        <!-- Create pos/patches folder -->
        <mkdir dir="${installer.staging.pos.dir}/patches"/>
        <!-- All Windows versions except XP: Extract wincomm/ibm-javacomm-win32-x86.zip -->
        <if>
            <istrue value="${installer.os.is-windows-non-xp}"/>
            <then>
                <unzip dest="${installer.staging.dir}" src="${installer.product.dir}/shared/wincomm/ibm-javacomm-win32-x86.zip"/>
            </then>
        </if>
    </target>

    <target name="install-stage-pos-config">
        <!-- Create pos/config folder -->
        <mkdir dir="${installer.staging.pos.config.dir}"/>
        <!-- copy the config files over to pos/config -->
        <copy todir="${installer.staging.pos.config.dir}"
            overwrite="true"
            includeemptydirs="true"
            preservelastmodified="true"
            verbose="${installer.verbose}">
            <fileset refid="installer.pos.config.fileset"/>
            <fileset refid="installer.shared.pos.config.fileset"/>
        </copy>

        <!-- if not an ISD Server install, delete the PinCommCodes.properties -->
        <if>
            <or>
                <isset property="install.is-client-install"/>
                <not>
                    <isset property="install.is-tender-authorization-isd"/>
                </not>
            </or>
            <then>
                <delete file="${installer.staging.pos.config.dir}/PinCommCodes.properties"/>
            </then>
        </if>

        <!-- Update the config files as necessary -->
        <antcall target="install-stage-pos-config-shared" inheritRefs="true"/>
        <if>
            <isset property="install.is-client-install"/>
            <then>
                <antcall target="install-stage-pos-config-client" inheritRefs="true"/>
            </then>
        </if>
        <if>
            <isset property="install.is-server-install"/>
            <then>
                <antcall target="install-stage-pos-config-storeserver" inheritRefs="true"/>
                <antcall target="install-stage-pos-config-centraloffice" inheritRefs="true"/>
                <antcall target="install-stage-pos-config-siebel" inheritRefs="true"/>
                <antcall target="install-stage-pos-config-email-enterprise-webservice" inheritRefs="true"/>
                <antcall target="install-stage-pos-config-lat-webservice" inheritRefs="true"/>
                <antcall target="install-stage-pos-config-rm" inheritRefs="true"/>
            </then>
        </if>
        <antcall target="install-stage-pos-config-manager" inheritRefs="true"/>
        <antcall target="install-stage-pos-config-context" inheritRefs="true"/>
        <antcall target="install-stage-pos-config-vat" inheritRefs="true"/>
        <antcall target="install-stage-pos-config-rsa" inheritRefs="true"/>
    </target>

    <target name="install-stage-pos-config-shared">

        <replace file="${installer.staging.pos.config.dir}/log4j.xml" summary="true" >
            <replacefilter token="$LOGLEVEL$" value="${input.logging.detail}"/>
        </replace>

        <replaceregexp file="${installer.staging.pos.config.dir}/application.properties"
            match=" *password *=.*"
            replace="password = ${install.derby.password-property}" flags="gi" byline="true"/>
        <!-- update application.xml with appropriate values for POS to RM -->
        <replace file="${installer.staging.pos.config.dir}/parameter/application/application.xml" summary="true">
            <replacefilter token="@use.oracle.retail.return.management@" value="${use.oracle.retail.return.management}" />
            <replacefilter token="@use.oracle.retail.return.management.hidden@" value="${use.oracle.retail.return.management.hidden}" />
            <replacefilter token="@use.rm.tenders@" value="${use.rm.tenders}" />
            <replacefilter token="@use.rm.tenders.hidden@" value="${use.rm.tenders.hidden}" />
        </replace>

        <if>
            <istrue value="${install.is-ereceipt-install}"/>
            <then>
                <replace file="${installer.staging.pos.config.dir}/parameter/application/application.xml" summary="true">
                <replacefilter token="$ERECEIPTFUNCTIONALITY$" value="Y" />
            </replace>
            </then>
            <else>
                <replace file="${installer.staging.pos.config.dir}/parameter/application/application.xml" summary="true">
                    <replacefilter token="$ERECEIPTFUNCTIONALITY$" value="N" />
                </replace>
            </else>
        </if>

        <!-- update application.properties -->
        <replace file="${installer.staging.pos.config.dir}/application.properties" summary="true" >
            <replacefilter token="WorkstationID=$WORKSTATIONID$" value="WorkstationID=${input.register.number}"/>
            <replacefilter token="StoreID=$STOREID$" value="StoreID=${input.configured.store.id}"/>
            <replacefilter token="locale_Default=en_US" value="locale_Default=${input.locale.default}"/>
            <replacefilter token="locale_Journaling=en_US" value="locale_Journaling=${input.locale.default}"/>
            <replacefilter token="locale_Receipts=en_US" value="locale_Receipts=${input.locale.default}"/>
            <replacefilter token="locale_PoleDisplay=en_US" value="locale_PoleDisplay=${input.locale.default}"/>
            <replacefilter token="locale_Reports=en_US" value="locale_Reports=${input.locale.default}"/>
            <replacefilter token="locale_Devices=en_US" value="locale_Devices=${input.locale.default}"/>
            <replacefilter token="supported_locales=en" value="supported_locales=${install.supported.locales}"/>
            <replacefilter token="$INSTALLER_PHRASE$" value="installPhrase"/>
        </replace>
        <if>
            <istrue value="${install.is-siebel-webservices-install}" />
            <then>
                <replaceregexp file="${installer.staging.pos.config.dir}/application.properties" match="ExternalOrderEnabled.*"
                    replace="ExternalOrderEnabled=true" flags="gi" />
            </then>
        </if>

        <!-- Sim Inventory Inquiry and Reservation -->
        <if>
            <istrue value="${install.is-sim-server-install}" />
            <then>
                <replaceregexp file="${installer.staging.pos.config.dir}/application.properties" match="ORSIMWebServiceURL.*"
                    replace="ORSIMWebServiceURL=${input.ORSIMWebServiceURL}" flags="gi" />
                <!-- Modify DefaultConnectorTechnician.xml file property "ORSIMWebServiceURL" with the user entered URL -->
                <replaceregexp file="${installer.staging.pos.config.technician.dir}/DefaultConnectorTechnician.xml" match="ORSIMWebServiceURL"
                                    replace="${input.ORSIMWebServiceURL}" flags="gi" />
            </then>
        </if>
        <if>
            <or>
                <istrue value="${install.is-inventory-inquiry-install}" />
                <istrue value="${install.is-inventory-inquiry-client-install}" />
            </or>
            <then>
                <replaceregexp file="${installer.staging.pos.config.dir}/application.properties" match="PSIEnabled.*"
                    replace="PSIEnabled=true" flags="gi" />
            </then>
        </if>
        <if>
            <istrue value="${install.is-inventory-reservation-install}" />
            <then>
                <replaceregexp file="${installer.staging.pos.config.dir}/application.properties" match="InventoryReservationEnabled.*"
                     replace="InventoryReservationEnabled=${install.is-inventory-reservation-install}" flags="gi" />
            </then>
        </if>
        <if>
            <istrue value="${install.is-inventory-update-install}" />
            <then>
                <replaceregexp file="${installer.staging.pos.config.dir}/application.properties" match="InventoryUpdateEnabled.*"
                     replace="InventoryUpdateEnabled=${install.is-inventory-update-install}" flags="gi" />
            </then>
        </if>
        <if>
            <istrue value="${install.is-item-basket-install}" />
            <then>
                <replaceregexp file="${installer.staging.pos.config.dir}/application.properties" match="ItemBasketEnabled.*"
                    replace="ItemBasketEnabled=true" flags="gi" />
            </then>
        </if>
        <if>
            <istrue value="${install.is-server-serialization-install}" />
            <then>
               <replaceregexp file="${installer.staging.pos.config.dir}/application.properties" match="SerializationEnabled.*"
                   replace="SerializationEnabled=${install.is-server-serialization-install}" flags="gi" />
            </then>
        </if>
        <!-- Bill Pay -->
        <if>
            <istrue value="${install.is-billpay-install}" />
            <then>
                <replaceregexp file="${installer.staging.pos.config.dir}/application.properties" match="BillPayEnabled.*"
                         replace="BillPayEnabled=${install.is-billpay-install}" flags="gi" />
            </then>
         </if>

        <!-- POS LAT Integration -->
         <if>
             <istrue value="${install.is-lat-webservices-install}" />
                <then>
                   <replaceregexp file="${installer.staging.pos.config.dir}/application.properties" match="LatWebServiceEnabled.*"
                                  replace="LatWebServiceEnabled=${install.is-lat-webservices-install}" flags="gi" />
                </then>
         </if>
        <!-- update rmihost.xml -->
        <replace file="${installer.staging.pos.config.dir}/rmihost.xml" summary="true">
            <replacefilter
                token="&lt;URL name=&quot;data_server_host_name&quot; port=&quot;data_server_port_number&quot; tier=&quot;data_server_name&quot;/&gt;"
                value="&lt;!-- &lt;URL name=&quot;data_server_host_name&quot; port=&quot;data_server_port_number&quot; tier=&quot;data_server_name&quot;/&gt; --&gt;"/>
            <replacefilter
                token="port=&quot;store_server_port_number&quot;"
                value="port=&quot;${input.store.server.port}&quot;"/>
            <replacefilter
                token="name=&quot;store_server_host_name&quot;"
                value="name=&quot;${input.store.server.hostname}&quot;"/>
        </replace>
        <!-- update posfoundation.properties -->
        <if>
               <isset property="install.is-secure-rmi-enabled"/>
            <then>
                <replace file="${installer.staging.pos.config.dir}/posfoundation.properties" summary="true">
                    <replacefilter token="EncryptValets=false" value="EncryptValets=true"/>
                </replace>
            </then>
        </if>
        <if>
            <or>
            <istrue value="${install.server.keystore}"/>
            <istrue value="${install.client.keystore}"/>
            </or>
            <then>
                <replace file="${installer.staging.pos.config.dir}/posfoundation.properties" summary="true">
                    <replacefilter token="#javax.net.ssl.keyStore=$KEYSTORE_FILE$" value="javax.net.ssl.keyStore=${escaped.ssl.keystore.location}"/>
                    <replacefilter token="#javax.net.ssl.keyStorePassword=$KEYSTORE_PASSWORD$" value="javax.net.ssl.keyStorePassword=${input.ssl.keystore.password-property}"/>
                </replace>
            </then>
        </if>
        <if>
            <istrue value="${install.client.truststore}"/>
            <then>
                <replace file="${installer.staging.pos.config.dir}/posfoundation.properties" summary="true">
                    <replacefilter token="#javax.net.ssl.trustStore=$TRUSTSTORE_FILE$" value="javax.net.ssl.trustStore=${escaped.ssl.truststore.location}"/>
                </replace>
            </then>
        </if>
        <if>
            <istrue value="${install.server.truststore}"/>
            <then>
                <replace file="${installer.staging.pos.config.dir}/posfoundation.properties" summary="true">
                    <replacefilter token="#javax.net.ssl.trustStore=$TRUSTSTORE_FILE$" value="javax.net.ssl.trustStore=${escaped.ssl.truststore.location}"/>
                </replace>
                <if>
                    <length string="${input.ssl.truststore.password}" when="greater" length="0"/>
                    <then>
                        <replace file="${installer.staging.pos.config.dir}/posfoundation.properties" summary="true">
                            <replacefilter token="#javax.net.ssl.trustStorePassword=$TRUSTSTORE_PASSWORD$" value="javax.net.ssl.trustStorePassword=${input.ssl.truststore.password-property}"/>
                        </replace>
                    </then>
                </if>
            </then>
        </if>


        <!-- Replace all instances of 'oracle/retail/stores/domain/arts/DefaultDataTechnician.xml' with 'config/DefaultDataTechnician.xml' -->
        <replaceregexp match="oracle/retail/stores/domain/arts/DefaultDataTechnician\.xml" replace="config/DefaultDataTechnician.xml" flags="g" >
            <fileset refid="staging.pos.config.images-excluded.fileset"/>
        </replaceregexp>
        <!-- If SIM integration, extract defaultuicfg.xml for manipulation -->
        <if>
                <or>
                   <istrue value="${input.enable.orsim.integration}" />
                   <istrue value="${install.is-billpay-install}" />
              </or>
            <then>
                <unzip src="${installer.staging.pos.dir}/lib/oracle.stores.pos.jar"
                       dest="${installer.staging.pos.dir}/lib">
                    <patternset>
                        <include name="oracle/retail/stores/pos/config/defaults/defaultuicfg.xml"/>
                    </patternset>
                </unzip>
            </then>
        </if>
        <!-- Update defaultuicfg.xml for PSI integration -->
        <if>
            <and>
                <isset property="install.is-client-install"/>
                <istrue value="${input.enable.orsim.integration}" />
            </and>
            <then>
                <unzip src="${installer.staging.pos.dir}/lib/oracle.stores.pos.jar"
                       dest="${installer.staging.pos.dir}/lib">
                    <patternset>
                        <include name="oracle/retail/stores/pos/config/defaults/defaultuicfg.xml"/>
                    </patternset>
                </unzip>
            </then>
        </if>
        <!-- Update defaultuicfg.xml for PSI integration -->
        <if>
            <and>
                <isset property="install.is-client-install"/>
                <istrue value="${input.enable.orsim.integration}" />
            </and>
            <then>
                <replaceregexp file="${installer.staging.pos.dir}/lib/oracle/retail/stores/pos/config/defaults/defaultuicfg.xml"
                               match="&lt;!--\s*Start PSI Data operations"
                               replace="&lt;!-- Start PSI Data operations --&gt;"  />
                <replaceregexp file="${installer.staging.pos.dir}/lib/oracle/retail/stores/pos/config/defaults/defaultuicfg.xml"
                               match="END PSI Data operations\s*--&gt;"
                               replace="&lt;!-- END PSI Data operations --&gt;"  />
            </then>
        </if>
        <!-- Update defaultuicfg.xml for Item Basket integration -->
        <if>
            <istrue value="${install.is-client-item-basket-install}" />
            <then>
                <replaceregexp file="${installer.staging.pos.dir}/lib/oracle/retail/stores/pos/config/defaults/defaultuicfg.xml"  match="&lt;!--\s*Start ItemBasket Data operations" replace="&lt;!-- Start ItemBasket Data operations --&gt;"  />
                <replaceregexp file="${installer.staging.pos.dir}/lib/oracle/retail/stores/pos/config/defaults/defaultuicfg.xml"  match="END ItemBasket Data operations\s*--&gt;" replace="&lt;!-- End ItemBasket Data operations --&gt;"  />
            </then>
        </if>
        <!-- Update defaultuicfg.xml for BillPay integration -->
        <if>
            <istrue value="${install.is-billpay-install}" />
            <then>
                <replaceregexp file="${installer.staging.pos.dir}/lib/oracle/retail/stores/pos/config/defaults/defaultuicfg.xml"  match="&lt;!--\s*Start Bill Pay" replace="&lt;!-- Start Bill Pay --&gt;"  />
                <replaceregexp file="${installer.staging.pos.dir}/lib/oracle/retail/stores/pos/config/defaults/defaultuicfg.xml"  match="End Bill Pay\s*--&gt;" replace="&lt;!-- End Bill Pay --&gt;"  />
          </then>
        </if>
        <!-- Update the PosLDB, Default and Enterprise DataTechnician files -->
        <replace dir="${installer.staging.pos.config.technician.dir}" summary="true">
            <include name="**/*DataTechnician*"/>
            <replacefilter token="$DB_HELPER$" value="${install.db.helper.class}"/>
            <replacefilter token="$DB_JDBC_DRIVER$" value="${input.db.jdbc.driver.class}"/>
            <replacefilter token="$DB_JDBC_URL$" value="${input.db.jdbc.url}"/>
            <replacefilter token="$DB_JDBC_URL_SECURE$" value="${install.db.jdbc.url.secure}"/>
            <replacefilter token="$DB_USER$" value="${input.db.username}"/>
            <replacefilter token="$DB_PASSWORD$" value="${install.db.password-alias}"/>
            <replacefilter token="$DB_EXCEPTION_MAP$" value="${install.db.exception.map}"/>
            <replacefilter token="$IA_CO_SERVER_NAME$" value="${input.co.hostname}"/>
        </replace>
        <if>
            <and>
                <isset property="install.is-server-install"/>
                <isset property="install.is-secure-jdbc-enabled" />
                <istrue value="${install.is-db-oracle}" />
            </and>
            <then>
                 <replaceregexp file="${installer.staging.pos.config.technician.dir}/DefaultDataTechnician.xml" match="&lt;!--\sBEGIN Secure JDBC" replace="&lt;!-- BEGIN Secure JDBC --&gt;" flags="gi" />
                 <replaceregexp file="${installer.staging.pos.config.technician.dir}/DefaultDataTechnician.xml" match="END Secure JDBC --&gt;" replace="&lt;!-- END Secure JDBC --&gt;" flags="gi" />
            </then>
        </if>
        <!-- comment out statementCacheSize for DB2 installations -->
        <if>
            <or>
              <istrue value="${install.is-db-db2}" />
              <istrue value="${install.is-db-mysql}" />
            </or>
            <then>
                <replaceregexp file="${installer.staging.pos.config.technician.dir}/DefaultDataTechnician.xml" match="&lt;!--\sBEGIN statementCacheSize --&gt;" replace="&lt;!-- BEGIN statementCacheSize" flags="gi" />
                <replaceregexp file="${installer.staging.pos.config.technician.dir}/DefaultDataTechnician.xml" match="&lt;!-- END statementCacheSize --&gt;" replace="END statementCacheSize --&gt;" flags="gi" />
            </then>
        </if>
        <if>
            <and>
                <isset property="install.is-server-install"/>
                <not>
                    <or>
                        <and>
                            <isset property="input.appserver.type"/>
                            <equals arg1="${input.appserver.type}" arg2="STANDALONE" casesensitive="false"/>
                        </and>
                        <and>
                            <isset property="input.transaction.retrieval.location"/>
                            <equals arg1="${input.transaction.retrieval.location}" arg2="LOCAL" casesensitive="false"/>
                        </and>
                    </or>
                </not>
            </and>
            <then>
                <if>
                    <and>
                        <isset property="install.is-secure-jdbc-enabled" />
                        <istrue value="${install.is-db-oracle}" />
                    </and>
                    <then>
                        <replaceregexp file="${installer.staging.pos.config.technician.dir}/EnterpriseDataTechnician.xml" match="&lt;!--\sBEGIN Secure JDBC" replace="&lt;!-- BEGIN Secure JDBC --&gt;" flags="gi" />
                        <replaceregexp file="${installer.staging.pos.config.technician.dir}/EnterpriseDataTechnician.xml" match="END Secure JDBC --&gt;" replace="&lt;!-- END Secure JDBC --&gt;" flags="gi" />
                    </then>
                </if>
                <if>
                    <isset property="install.is-scratchpad-db-enabled"/>
                    <then>
                        <replace dir="${installer.staging.pos.config.technician.dir}" summary="true">
                            <include name="**/*DataTechnician*"/>
                            <replacefilter token="$ENT_DB_JDBC_DRIVER$" value="${input.scratchpad.db.jdbc.driver.class}"/>
                            <replacefilter token="$ENT_DB_JDBC_URL$" value="${input.scratchpad.db.jdbc.url}"/>
                            <replacefilter token="$ENT_DB_USER$" value="${input.scratchpad.db.username}"/>
                            <replacefilter token="$ENT_DB_PASSWORD$" value="${install.scratchpad.db.password-property}"/>
                        </replace>
                    </then>
                </if>
            </then>
        </if>
        <!-- update application.properties set SIGCAPENABLED="false" and CRDNUMTOKENENABLED="false" -->
        <!-- if the user has set input.tender.authorization.type=SERVEBASE -->
        <!-- otherwise set SIGCAPENABLED="true"  and CRDNUMTOKENENABLED="true" -->

        <if>
        <isset property="install.is-tender-authorization-servebase"/>
            <then>
                <replace file="${installer.staging.pos.config.dir}/application.properties" summary="true" >
                    <replacefilter token="$SIGCAPENABLED$" value="false"/>
                    <replacefilter token="$CRDNUMTOKENENABLED$" value="false"/>
                </replace>
            </then>
            <elseif>
                <or>
                    <isset property="install.is-tender-authorization-simulated"/>
                    <isset property="install.is-tender-authorization-isd"/>
                </or>
                <then>
                    <replace file="${installer.staging.pos.config.dir}/application.properties" summary="flase" >
                        <replacefilter token="$SIGCAPENABLED$" value="true"/>
                        <replacefilter token="$CRDNUMTOKENENABLED$" value="true"/>
                    </replace>
                </then>
            </elseif>
        </if>

        <!-- Strip all remaining references to IA variables in the DataTechnician files -->
        <remove-IA-variable-refs dir="${installer.staging.pos.config.technician.dir}" includes="**/*DataTechnician*"/>
    </target>
    <target name="install-stage-pos-config-shared-foundation">
    </target>
    <target name="install-stage-pos-config-centraloffice" if="install.is-integrated-server-install">
        <!-- If the hostname of the CO server is not 'centraloffice' then create a jndi.properties file named after the CO server hostname -->
        <if>
            <or>
              <equals arg1="${input.enable.co.webservices}" arg2="false"/>
              <equals arg1="${input.data.replication.jms.local.option}" arg2="false"/>
            </or>
            <then>
                <if>
                    <not><equals arg1="${input.co.hostname}" arg2="centraloffice"/></not>
                    <then>
                        <copy file="${installer.staging.pos.config.dir}/centraloffice.jndi.properties" tofile="${installer.staging.pos.config.dir}/${input.co.hostname}.jndi.properties" overwrite="true" includeemptydirs="true" preservelastmodified="true" verbose="${installer.verbose}"/>
                    </then>
                </if>
                <!-- perform common updates to the properties file -->
                <replace file="${installer.staging.pos.config.dir}/${input.co.hostname}.jndi.properties" summary="true">
                    <replacefilter token="$APP_ADMIN_USERNAME$" value="${input.app.admin.username}"/>
                    <replacefilter token="$APP_ADMIN_PASSWORD$" value="${install.app.admin.password-property}"/>
                    <replacefilter token="$IA_CO_SERVER_NAME$" value="${input.co.hostname}"/>
                    <replacefilter token="$IA_CO_PORT_NAME$" value="${input.co.jndi-port}"/>
                    <replacefilter token="$CO_ADMIN_USERNAME$" value="${input.co.admin.username}"/>
                    <replacefilter token="$CO_ADMIN_PASSWORD$" value="${install.co.admin.password-property}"/>
                </replace>
            </then>
        </if>
        
        
        
        <!-- perform appserver-specific updates to the file -->
        <antcall target="install-stage-pos-config-centraloffice-was" inheritRefs="true"/>
        <antcall target="install-stage-pos-config-centraloffice-oas" inheritRefs="true"/>
        <antcall target="install-stage-pos-config-centraloffice-wl" inheritRefs="true"/>
        <!-- Central Office webservices configuration -->
        <if>
            <istrue value="${install.is-co-webservices-install}" />
            <then>
                <replace file="${installer.staging.pos.config.dir}/application.properties" summary="true" >
                    <replacefilter token="$ENABLE_CO_WEBSERVICES$" value="${input.enable.co.webservices}"/>
                </replace>
                <replaceregexp file="${installer.staging.pos.config.context.dir}/ServiceContext.xml" match="&lt;!--\s*Begin centraloffice webservice integration" replace="&lt;!-- Begin centraloffice webservice integration --&gt;" flags="gi" />
                <replaceregexp file="${installer.staging.pos.config.context.dir}/ServiceContext.xml" match="End centraloffice webservice integration --&gt;" replace="&lt;!-- End centraloffice webservice integration --&gt;" flags="gi" />
                <replace file="${installer.staging.pos.config.context.dir}/ServiceContext.xml" summary="true" >
                    <replacefilter token="$CO_WEBSERVICES_PROTOCOL$" value="${input.posco.protocol}"/>
                    <replacefilter token="$CO_WEBSERVICES_SERVER_NAME$" value="${input.co.webservices.hostname}"/>
                    <replacefilter token="$CO_WEBSERVICES_PORT$" value="${input.posco.webservices.port}"/>
                    <replacefilter token="$CO_ADMIN_USERNAME$" value="${input.posco.webservices.username}"/>
                    <replacefilter token="$CO_ADMIN_PASSWORD$" value="coWebserviceUser"/>
                </replace>
            </then>
            <else>
                <replace file="${installer.staging.pos.config.dir}/application.properties" summary="true" >
                    <replacefilter token="$ENABLE_CO_WEBSERVICES$" value="${input.enable.co.webservices}"/>
                </replace>
            </else>
        </if>
        <!-- End of Central Office webservices configuration -->

    </target>

    <target name="install-stage-pos-config-email-enterprise-webservice">
        <if>
            <istrue value="${install.data-replicaton-through-webservice-enabled}" />
            <then>
                <replaceregexp file="${installer.staging.pos.config.dir}/log4j.xml"  match="&lt;!--Begin Email" replace="&lt;!-- Begin Email --&gt;" flags="gi"/>
                <replaceregexp file="${installer.staging.pos.config.dir}/log4j.xml" match="End Email--&gt;" replace="&lt;!--  End Email --&gt;" flags="gi"/>
                <replace file="${installer.staging.pos.config.dir}/log4j.xml" summary="true" >
                    <replacefilter token="$SMTP_HOST$" value="${input.enterprise.mail.smtp.host}"/>
                    <replacefilter token="$SMTP_PORT$" value="${input.enterprise.mail.smtp.port}"/>
                    <replacefilter token="$FROM_ADDRESS$" value="${input.enterprise.mail.from}"/>
                    <replacefilter token="$TO_ADDRESS$" value="${input.enterprise.mail.to}"/>
                      <replacefilter token="$STORE_ID$" value="${input.configured.store.id}"/>
                </replace>
            </then>
        </if>
    </target>

    <!-- Siebel webservices configuration -->
    <target name="install-stage-pos-config-siebel" if="install.is-siebel-webservices-install">
        <if>
            <equals arg1="${input.possiebel.protocol}" arg2="https" />
            <then>
                <replace file="${installer.staging.pos.config.dir}/application.properties" summary="true" >
                    <replacefilter token="$ENABLE_SIEBEL_HTTPS_PROTOCOL$" value="true"/>
                </replace>
            </then>
            <elseif>
                <equals arg1="${input.possiebel.protocol}" arg2="http" />
                    <then>
                        <replace file="${installer.staging.pos.config.dir}/application.properties" summary="true" >
                            <replacefilter token="$ENABLE_SIEBEL_HTTPS_PROTOCOL$" value="false"/>
                        </replace>
                    </then>
            </elseif>
        </if>

       <stringenc operation="encodeurl" value="${input.siebel.webServiceURL}" outputproperty="input.siebel.webServiceURL-encoded"/>

        <replaceregexp match="&lt;!--Begin Siebel" replace="&lt;!-- Begin Siebel --&gt;" flags="gi">
            <fileset dir="${installer.staging.pos.config.technician.dir}">
                <include name="DefaultConnectorTechnician.xml"/>
                <include name="RetailTransactionTechnician.xml"/>
            </fileset>
        </replaceregexp>
        <replaceregexp match="End Siebel--&gt;" replace="&lt;!--  End Siebel --&gt;" flags="gi">
            <fileset dir="${installer.staging.pos.config.technician.dir}">
                <include name="DefaultConnectorTechnician.xml"/>
                <include name="RetailTransactionTechnician.xml"/>
            </fileset>
        </replaceregexp>
        <replace dir="${installer.staging.pos.config.technician.dir}" summary="true">
            <include name="**/*DefaultConnectorTechnician*"/>
            <include name="**/*RetailTransactionTechnician*"/>
            <replacefilter token="$SIEBEL_URL" value="${input.siebel.webServiceURL-encoded}"/>
            <replacefilter token="$SIEBEL_MYSTORE_USER" value="${input.siebel.myStoreUser}"/>
            <replacefilter token="$SIEBEL_MYSTORE_PASSWD" value="${install.siebel.myStorePassword-property}"/>
            <replacefilter token="$SIEBEL_GLOBAL_USER" value="${input.siebel.globalUser}"/>
            <replacefilter token="$SIEBEL_GLOBAL_PASSWD" value="${install.siebel.globalPassword-property}"/>
            <replacefilter token="$SIEBEL_SECURITY" value="${input.possiebel.authentication.type}"/>
        </replace>
    </target>
    <!-- End of Siebel webservices configuration -->

    <!-- Lat Webservice Begin -->
    <target name="install-stage-pos-config-lat-webservice" if="install.is-lat-webservices-install">


        <stringenc operation="encodeurl" value="${input.poslat.protocol}://${input.poslat.webservices.host}:${input.poslat.webservices.port}/webservices/services/WSRequestTicket" outputproperty="input.lat.webServiceURL-encoded"/>

        <replaceregexp file="${installer.staging.pos.config.technician.dir}/DefaultConnectorTechnician.xml"  match="&lt;!--\s*Begin LAT Webservice" replace="&lt;!-- Begin LAT Webservice --&gt;" flags="gi"/>
        <replaceregexp file="${installer.staging.pos.config.technician.dir}/DefaultConnectorTechnician.xml" match="End LAT\s*--&gt;" replace="&lt;!--  End LAT --&gt;" flags="gi"/>
        <replace dir="${installer.staging.pos.config.technician.dir}" summary="true">
            <include name="**/*DefaultConnectorTechnician*"/>
            <replacefilter token="$LAT_URL" value="${input.lat.webServiceURL-encoded}"/>
            <replacefilter token="$LAT_USER" value="${input.LAT.webservice.uid}"/>
            <replacefilter token="$LAT_WS_PWD" value="${input.LAT.webservice.passwd-property}"/>
            <replacefilter token="$PASSWD_EN" value="${input.is.webservice.passwd.enabled}"/>
        </replace>
    </target>
    <!-- Lat Webservice End -->

    <target name="install-stage-pos-config-centraloffice-was" if="install.is-appserver-WAS">
		<if>
			<or>
	            <equals arg1="${input.enable.co.webservices}" arg2="false" casesensitive="false"/>
	            <equals arg1="${input.data.replication.jms.local.option}" arg2="false" casesensitive="false"/>
			</or>
			<then>
		        <replace file="${installer.staging.pos.config.dir}/${input.co.hostname}.jndi.properties" summary="true">
		            <replacefilter token="#WAS " value=""/>
		        </replace>
			</then>
		</if>
    </target>
    <target name="install-stage-pos-config-centraloffice-oas" if="install.is-appserver-OAS">
        <replace file="${installer.staging.pos.config.dir}/${input.co.hostname}.jndi.properties" summary="true">
            <replacefilter token="#OAS " value=""/>
        </replace>
    </target>
    <target name="install-stage-pos-config-centraloffice-wl" if="install.is-appserver-WL">
		<if>
			<or>
	            <equals arg1="${input.enable.co.webservices}" arg2="false" casesensitive="false"/>
	            <equals arg1="${input.data.replication.jms.local.option}" arg2="false" casesensitive="false"/>
			</or>
			<then>
		        <if>
		            <equals arg1="true" arg2="${input.wl.secure.co}"/>
		            <then>
		                <property name="co.protocol" value="t3s"/>
		                <replace file="${installer.staging.pos.config.dir}/${input.co.hostname}.jndi.properties" summary="true">
		                    <replacefilter token="#SSL " value=""/>
		                </replace>
		            </then>
		            <else>
		                <property name="co.protocol" value="t3"/>
		            </else>
		        </if>
		        <replace file="${installer.staging.pos.config.dir}/${input.co.hostname}.jndi.properties" summary="true">
		            <replacefilter token="#WL " value=""/>
		            <replacefilter token="$WL_PROTOCOL$" value="${co.protocol}"/>
		        </replace>
			</then>
		</if>
    </target>
    <target name="install-stage-pos-config-manager">
        <if>
            <and>
                <istrue value="${install.is-client-install}"/>
                <istrue value="${install.is-transaction-retrieval-location-central}"/>
            </and>
            <then>
                <replace file="${installer.staging.pos.config.manager.dir}/PosDataManager.xml" summary="true">
                    <replacefilter token="&lt;!-- Store DB Begin --&gt;" value="&lt;!-- Store DB Begin"/>
                    <replacefilter token="&lt;!-- Store DB End --&gt;" value="Store DB End --&gt;"/>
                    <replacefilter token="&lt;!-- Enterprise DB" value="&lt;!-- Enterprise DB --&gt;"/>
                    <replacefilter token="Enterprise DB End --&gt;" value="&lt;!-- Enterprise DB End --&gt;"/>
                    <replacefilter token="&lt;!-- Datatech EnterpriseDataTechnician BEGIN" value="&lt;!-- Datatech EnterpriseDataTechnician BEGIN --&gt;"/>
                    <replacefilter token="Datatech EnterpriseDataTechnician END --&gt;" value="&lt;!-- Datatech EnterpriseDataTechnician END --&gt;"/>
                </replace>
            </then>
        </if>
        <if>
            <and>
                <istrue value="${install.is-client-install}"/>
                <istrue value="${install.is-transaction-retrieval-location-central-local-failover}"/>
            </and>
            <then>
                <replace file="${installer.staging.pos.config.manager.dir}/PosDataManager.xml" summary="true">
                    <replacefilter token="&lt;!-- Store DB Begin --&gt;" value="&lt;!-- Store DB Begin"/>
                    <replacefilter token="&lt;!-- Store DB End --&gt;" value="Store DB End --&gt;"/>
                    <replacefilter token="&lt;!-- Failover Begin" value="&lt;!-- Failover Begin --&gt;"/>
                    <replacefilter token="Failover End --&gt;" value="&lt;!-- Failover End --&gt;"/>
                    <replacefilter token="&lt;!-- Datatech EnterpriseDataTechnician BEGIN" value="&lt;!-- Datatech EnterpriseDataTechnician BEGIN --&gt;"/>
                    <replacefilter token="Datatech EnterpriseDataTechnician END --&gt;" value="&lt;!-- Datatech EnterpriseDataTechnician END --&gt;"/>
                </replace>
            </then>
        </if>
        <if>
            <and>
                <istrue value="${install.is-client-install}"/>
                <istrue value="${input.enable.orsim.integration}"/>
            </and>
            <then>
                <replaceregexp file="${installer.staging.pos.config.technician.dir}/PosLDBDataTechnician.xml" match="&lt;!--\s*Start PSI Data operations"  replace="&lt;!-- Start PSI Data operations --&gt;" flags="gi" />
                <replaceregexp file="${installer.staging.pos.config.technician.dir}/PosLDBDataTechnician.xml" match="END PSI Data operations \s*--&gt;"  replace="&lt;!-- END PSI Data operations --&gt;" flags="gi" />
            </then>
        </if>
        <!-- if item basket  -->
        <if>
            <istrue value="${install.is-server-item-basket-install}" />
            <then>
                <replaceregexp file="${installer.staging.pos.config.technician.dir}/DefaultConnectorTechnician.xml" match="&lt;!--\s*Begin ItemBasket Connector" replace="&lt;!-- Begin ItemBasket Connector --&gt;" flags="gi"/>
                <replaceregexp file="${installer.staging.pos.config.technician.dir}/DefaultConnectorTechnician.xml" match="End ItemBasket Connector\s*--&gt;" replace="&lt;!--  End ItemBasket Connector --&gt;" flags="gi"/>
                <replaceregexp file="${installer.staging.pos.config.technician.dir}/DefaultConnectorTechnician.xml" match="&lt;!--\s*Begin ItemBasket Formatter" replace="&lt;!-- Begin ItemBasket Formatter --&gt;" flags="gi"/>
                <replaceregexp file="${installer.staging.pos.config.technician.dir}/DefaultConnectorTechnician.xml" match="End ItemBasket Formatter\s*--&gt;" replace="&lt;!--  End ItemBasket Formatter --&gt;" flags="gi"/>
                <replaceregexp file="${installer.staging.pos.config.technician.dir}/DefaultConnectorTechnician.xml" match="&lt;!--\s*Begin ItemBasket Message Route" replace="&lt;!-- Begin ItemBasket Message Route --&gt;" flags="gi"/>
                <replaceregexp file="${installer.staging.pos.config.technician.dir}/DefaultConnectorTechnician.xml" match="End Item BasketMessage Route\s*--&gt;" replace="&lt;!--  End Item BasketMessage Route --&gt;" flags="gi"/>
            </then>
        </if>
    </target>
    <target name="install-stage-pos-config-context">
        <!-- Updates to context files common to both client and server installs -->
        <!-- PCI: Set the Keystore implementation class, provider and hash algorithm -->
        <replace file="${installer.staging.pos.config.context.dir}/ServiceContext.xml" summary="true">
            <replacefilter token="$KEYSTORE_IMPL_CLASS$" value="${input.keystore.class}"/>
            <replacefilter token="$KEYSTORE_PROVIDER$" value="${input.keystore.provider}"/>
            <replacefilter token="$KEYSTORE_HASH_ALGORITHM$" value="${input.keystore.algorithm}"/>
        </replace>
        <replace file="${installer.staging.pos.config.context.dir}/PersistenceContext.xml" summary="true">
            <replacefilter token="$DB_OWNER_USER$" value="${input.db.owner.username}"/>
            <replacefilter token="$ENT_DB_USER$" value="${input.scratchpad.db.username}"/>
        </replace>
        <!-- Client-specific updates -->
        <antcall target="install-stage-pos-config-context-client" inheritRefs="true"/>
        <!-- Server-specific updates -->
        <antcall target="install-stage-pos-config-context-server" inheritRefs="true"/>
    </target>
    <target name="install-stage-pos-config-context-client" if="install.is-client-install">
    </target>
    <target name="install-stage-pos-config-context-server" if="install.is-server-install">
    <if>
        <!-- If inventory inquiry is required -->
        <equals arg1="${install.is-inventory-inquiry-install}" arg2="true" />
        <then>
            <!-- Uncomment service_PSIInventoryLookup bean definition -->
            <replaceregexp file="${installer.staging.pos.config.context.dir}/ServiceContext.xml" match="&lt;!--\s*Begin PSI Inventory Lookup Service Bean definition" replace="&lt;!-- Begin PSI Inventory Lookup Sercice Bean definition --&gt;" flags="gi" />
            <replaceregexp file="${installer.staging.pos.config.context.dir}/ServiceContext.xml" match="END PSI Inventory Lookup Service Bean definition --&gt;" replace="&lt;!-- END PSI Inventory Lookup Sercice Bean definition --&gt;" flags="gi" />
        </then>
    </if>
    <if>
        <!-- If Siebel is required -->
        <equals arg1="${install.is-siebel-webservices-install}" arg2="true" />
        <then>
            <!-- Uncomment service_SiebelMappingService bean definition -->
            <replaceregexp file="${installer.staging.pos.config.context.dir}/ServiceContext.xml" match="&lt;!--\s*Begin Siebel Mapping Service Bean definition" replace="&lt;!-- Begin Siebel Mapping Service Bean definition --&gt;" flags="gi" />
            <replaceregexp file="${installer.staging.pos.config.context.dir}/ServiceContext.xml" match="END Siebel Mapping Service Bean definition --&gt;" replace="&lt;!-- END Siebel Mapping Service Bean definition --&gt;" flags="gi" />
        </then>
    </if>
    </target>
    <target name="install-stage-pos-config-vat" if="install.is-vat-enabled">
        <replace file="${installer.staging.pos.config.dir}/application.properties" summary="true">
            <replacefilter token="InclusiveTaxEnabled=false" value="InclusiveTaxEnabled=true"/>
        </replace>
        <replace file="${installer.staging.pos.config.dir}/domain.properties" summary="true">
            <replacefilter token="InclusiveTaxEnabled=false" value="InclusiveTaxEnabled=true"/>
        </replace>
        <if>
            <istrue value="${install.is-client-install}"/>
            <then>
                <replace file="${installer.staging.pos.config.dir}/tourmap.xml" summary="true">
                    <replacefilter token="&lt;!-- BEGIN ADDED FOR VAT" value="&lt;!-- BEGIN ADDED FOR VAT --&gt;"/>
                    <replacefilter token="END ADDED FOR VAT --&gt;" value="&lt;!-- END ADDED FOR VAT --&gt;"/>
                    <replacefilter token="#tax.enableTaxInclusive=true" value="tax.enableTaxInclusive=true"/>
                </replace>
            </then>
        </if>
    </target>
    <target name="install-stage-pos-config-client" depends="install-stage-pos-config-client-conduit,install-stage-pos-config-client-journalmgr,install-stage-pos-config-client-devices,install-stage-pos-config-client-ereceipt,install-stage-pos-config-client-commext-tender-auth"/>
    <target name="install-stage-pos-config-client-ereceipt" if="install.is-ereceipt-install">
        <replace file="${installer.staging.pos.config.dir}/application.properties" summary="true">
            <replacefilter token="#mail.smtp.host=" value="mail.smtp.host=${input.mail.smtp.host}"/>
            <replacefilter token="#mail.smtp.port=" value="mail.smtp.port=${input.mail.smtp.port}"/>
            <replacefilter token="#mail.ereceipt.sender=" value="mail.ereceipt.sender=${input.mail.ereceipt.sender}"/>
            <replacefilter token="#mail.smtp.timeout=" value="mail.smtp.timeout=${input.mail.smtp.timeout}"/>
            <replacefilter token="#mail.smtp.connectiontimeout" value="mail.smtp.connectiontimeout=${input.mail.smtp.timeout}"/>
        </replace>
    </target>

    <target name="install-stage-pos-config-client-journalmgr" if="install.is-client-install">
        <!-- Update PosJournalManager.xml as necessary -->
        <antcall target="install-stage-pos-config-client-journalmgr-jms-journal" inheritRefs="true"/>
        <antcall target="install-stage-pos-config-client-journalmgr-webservice-journal" inheritRefs="true"/>
        <antcall target="install-stage-pos-config-client-journalmgr-db-journal-tech" inheritRefs="true"/>
    </target>
    <target name="install-stage-pos-config-client-journalmgr-jms-journal" if="install.is-client-jms-journal-enabled">
        <!-- Uncomment the IA_JMSJournalTech section in PosJournalManager.xml -->
        <replaceregexp match="&lt;!--\s*Begin_IA_JMSJournalTech" replace="&lt;!-- Begin_IA_JMSJournalTech --&gt;" flags="gi">
            <fileset refid="staging.pos.config.manager.journal.fileset"/>
        </replaceregexp>
        <replaceregexp match="End_IA_JMSJournalTech\s*--&gt;" replace="&lt;!-- End_IA_JMSJournalTech --&gt;" flags="gi">
            <fileset refid="staging.pos.config.manager.journal.fileset"/>
        </replaceregexp>
    </target>
    <target name="install-stage-pos-config-client-journalmgr-webservice-journal" if="install.is-client-webservice-journal-enabled">
        <!-- Uncomment the IA_WSJournalTech section in PosJournalManager.xml -->
        <replaceregexp match="&lt;!--\s*Begin_IA_WSJournalTech" replace="&lt;!-- Begin_IA_WSJournalTech --&gt;" flags="gi">
            <fileset refid="staging.pos.config.manager.journal.fileset"/>
        </replaceregexp>
        <replaceregexp match="End_IA_WSJournalTech\s*--&gt;" replace="&lt;!-- End_IA_WSJournalTech --&gt;" flags="gi">
            <fileset refid="staging.pos.config.manager.journal.fileset"/>
        </replaceregexp>
    </target>
    <target name="install-stage-pos-config-client-journalmgr-db-journal-tech" if="install.is-client-db-journal-enabled">
        <!-- Comment the IA_Default_JournalTech in PosJournalManager.xml -->
        <replaceregexp match="&lt;!--\s*Begin_IA_Default_JournalTech\s*--&gt;" replace="&lt;!-- Begin_IA_Default_JournalTech" flags="gi">
            <fileset refid="staging.pos.config.manager.journal.fileset"/>
        </replaceregexp>
        <replaceregexp match="&lt;!--\s*End_IA_Default_JournalTech\s*--&gt;" replace="End_IA_Default_JournalTech --&gt;" flags="gi">
            <fileset refid="staging.pos.config.manager.journal.fileset"/>
        </replaceregexp>
        <!-- Uncomment the IA_DBJournal section section in PosJournalManager.xml -->
        <replaceregexp match="&lt;!--\s*Begin_IA_DBJournal" replace="&lt;!-- Begin_IA_DBJournal --&gt;" flags="gi">
            <fileset refid="staging.pos.config.manager.journal.fileset"/>
        </replaceregexp>
        <replaceregexp match="End_IA_DBJournal\s*--&gt;" replace="&lt;!-- End_IA_DBJournal --&gt;" flags="gi">
            <fileset refid="staging.pos.config.manager.journal.fileset"/>
        </replaceregexp>
    </target>
    <target name="install-stage-pos-config-client-conduit">
        <!-- Update ClientConduit.xml as necessary -->
        <antcall target="install-stage-pos-config-client-conduit-queued-journal-manager" inheritRefs="true"/>
        <antcall target="install-stage-pos-config-client-conduit-externalorder-manager" inheritRefs="true"/>
        <antcall target="install-stage-pos-config-client-conduit-default-journal-tech" inheritRefs="true"/>
        <antcall target="install-stage-pos-config-client-conduit-default-inventory-manager" inheritRefs="true"/>
        <antcall target="install-stage-pos-config-client-conduit-parameter-file-transfer-techician-standalone" inheritRefs="true"/>
        <antcall target="install-stage-pos-config-client-conduit-parameter-file-transfer-techician-integrated" inheritRefs="true"/>
        <!-- Update CollapsedConduitFF.xml as necessary -->
        <antcall target="install-stage-pos-config-client-collapsed-conduit-db-journal" inheritRefs="true"/>
        <!-- Update other conduit files -->
        <antcall target="install-stage-pos-config-client-conduit-db-journal-tech" inheritRefs="true"/>
        <antcall target="install-stage-pos-config-client-conduit-plaf-image" inheritRefs="true"/>
        <antcall target="install-stage-pos-config-client-conduit-properties-unix" inheritRefs="true"/>
        <antcall target="install-stage-pos-config-client-conduit-logging" inheritRefs="true"/>
        <antcall target="install-stage-pos-config-client-conduit-logging-jms" inheritRefs="true"/>
        <antcall target="install-stage-pos-config-client-conduit-rm-pos" inheritRefs="true"/>
        <!-- Strip any remaining references to IA variables / Ant properties -->
        <remove-IA-variable-refs dir="${installer.staging.pos.config.conduit.dir}" includes="*CollapsedConduit*"/>
        <remove-IA-variable-refs dir="${installer.staging.pos.config.conduit.dir}" includes="*ClientConduit*"/>
    </target>
    <target name="install-stage-pos-config-client-conduit-rm-pos" if="install.is-rm-install">
        <!-- uncomment ReturnsManager substitution -->
        <replaceregexp file="${installer.staging.pos.config.conduit.dir}/ClientConduit.xml"  match="&lt;!--\s*BEGIN ReturnsManager" replace="&lt;!-- BEGIN ReturnsManager --&gt;" flags="gi"/>
        <replaceregexp file="${installer.staging.pos.config.conduit.dir}/ClientConduit.xml"  match="END ReturnsManager\s*--&gt;" replace="&lt;!-- END ReturnsManager --&gt;" flags="gi"/>
    </target>
    <target name="install-stage-pos-config-client-conduit-parameter-file-transfer-techician-standalone" if="install.is-standalone-server-install" >
        <!-- comment out FileTransferTechnician from ClientConduit.xml for Standalone installations -->
        <replaceregexp file="${installer.staging.pos.config.conduit.dir}/ClientConduit.xml"  match="&lt;!--\s*BEGIN FileTransferTechnician\s*--&gt;" replace="&lt;!-- BEGIN FileTransferTechnician " flags="gi"/>
        <replaceregexp file="${installer.staging.pos.config.conduit.dir}/ClientConduit.xml"  match="&lt;!--\s*END FileTransferTechnician\s*--&gt;" replace="END FileTransferTechnician --&gt; " flags="gi"/>
        <replaceregexp file="${installer.staging.pos.config.conduit.dir}/ClientConduit.xml"  match="&lt;!-- B.T USERNAME --&gt;" replace="" flags="gi"/>
        <replaceregexp file="${installer.staging.pos.config.conduit.dir}/ClientConduit.xml"  match="&lt;!-- E.T USERNAME --&gt;" replace="" flags="gi"/>
        <replaceregexp file="${installer.staging.pos.config.conduit.dir}/ClientConduit.xml"  match="&lt;!-- B.T PASSWORD --&gt;" replace="" flags="gi"/>
        <replaceregexp file="${installer.staging.pos.config.conduit.dir}/ClientConduit.xml"  match="&lt;!-- E.T PASSWORD --&gt;" replace="" flags="gi"/>
        <replaceregexp file="${installer.staging.pos.config.conduit.dir}/ClientConduit.xml"  match="propname=&quot;jmsPassword&quot; propvalue=&quot;.*&quot;" replace="propname=&quot;jmsPassword&quot; propvalue=&quot;&quot;" flags="gi"/>
    </target>

    <target name="install-stage-pos-config-client-conduit-parameter-file-transfer-techician-integrated" if="install.is-integrated-server-install" >
        <!-- comment out jms username password from ClientConduit.xml for weblogic integrated installations -->
        <if>
            <and>
                <istrue value="${install.is-appserver-WL}"/>
                <not><istrue value="${input.client.wl.secure.bo}"/></not>
               </and>
            <then>
                <replaceregexp file="${installer.staging.pos.config.conduit.dir}/ClientConduit.xml"  match="&lt;!-- B.T USERNAME --&gt;" replace="&lt;!-- " flags="gi"/>
                <replaceregexp file="${installer.staging.pos.config.conduit.dir}/ClientConduit.xml"  match="&lt;!-- E.T USERNAME --&gt;" replace="--&gt;" flags="gi"/>
                <replaceregexp file="${installer.staging.pos.config.conduit.dir}/ClientConduit.xml"  match="&lt;!-- B.T PASSWORD --&gt;" replace="&lt;!-- " flags="gi"/>
                <replaceregexp file="${installer.staging.pos.config.conduit.dir}/ClientConduit.xml"  match="&lt;!-- E.T PASSWORD --&gt;" replace="--&gt;" flags="gi"/>
                <replaceregexp file="${installer.staging.pos.config.conduit.dir}/ClientConduit.xml"  match="propname=&quot;jmsPassword&quot; propvalue=&quot;.*&quot;" replace="propname=&quot;jmsPassword&quot; propvalue=&quot;&quot;" flags="gi"/>
            </then>
            <else>
                <replaceregexp file="${installer.staging.pos.config.conduit.dir}/ClientConduit.xml"  match="&lt;!-- B.T USERNAME --&gt;" replace="" flags="gi"/>
                <replaceregexp file="${installer.staging.pos.config.conduit.dir}/ClientConduit.xml"  match="&lt;!-- E.T USERNAME --&gt;" replace="" flags="gi"/>
                <replaceregexp file="${installer.staging.pos.config.conduit.dir}/ClientConduit.xml"  match="&lt;!-- B.T PASSWORD --&gt;" replace="" flags="gi"/>
                <replaceregexp file="${installer.staging.pos.config.conduit.dir}/ClientConduit.xml"  match="&lt;!-- E.T PASSWORD --&gt;" replace="" flags="gi"/>
               </else>
        </if>
    </target>

    <target name="install-stage-pos-config-client-conduit-logging">
        <replace dir="${installer.staging.pos.config.conduit.dir}" summary="true">
            <include name="**/*"/>
            <replacefilter token="configInfo=&quot;classpath://config/log/PosLogFilter.xml&quot;" value="configInfo=&quot;classpath://config/log/PosLogFilterProd.xml&quot;"/>
        </replace>
        <!-- if standalone set listenForUpdates to "N" else "Y" -->
        <if>
            <istrue value="${install.is-standalone-server-install}" />
            <then>
                 <replace dir="${installer.staging.pos.config.conduit.dir}" summary="true">
                     <include name="**/*ClientConduit*"/>
                     <replacefilter token="$LISTENFORUPDATES" value="N" />
                </replace>
            </then>
            <else>
                 <replace dir="${installer.staging.pos.config.conduit.dir}" summary="true">
                     <include name="**/*ClientConduit*"/>
                     <replacefilter token="$LISTENFORUPDATES" value="Y" />
                </replace>
            </else>
        </if>
    </target>
    <target name="install-stage-pos-config-client-conduit-logging-jms" if="install.is-jms-enabled" >
        <replace dir="${installer.staging.pos.config.conduit.dir}" summary="true">
            <include name="**/*ClientConduit*"/>
            <replacefilter token="$IA_CLIENT_ID$" value="${input.jms.client-id}"/>
            <replacefilter token="$IA_JMS_ID$" value="${input.jms.username}"/>
            <replacefilter token="$IA_JMS_PASSWORD$" value="jmsUser"/>
        </replace>
    </target>

    <target name="install-stage-pos-config-storeserver-conduit-tender-auth">
        <antcall target="install-stage-pos-config-storeserver-conduit-tender-auth-isd" inheritRefs="true"/>
    </target>

    <target name="install-stage-pos-config-storeserver-conduit-tender-auth-isd" if="install.is-tender-authorization-isd">
        <replace dir="${installer.staging.pos.config.technician.dir}" summary="true">
            <include name="PaymentTechnician.xml"/>
            <include name="RetailTransactionTechnician.xml"/>
            <include name="PincommEncryptionKeyInitializerTechnician.xml"/>

            <replacefilter token="$PINCOMM_STORE_NUMBER" value="${input.tender.authorization.pincomm.location}"/>

            <replacefilter token="&lt;!-- BEGIN formatters for PINComm integration"
                           value="&lt;!-- BEGIN formatters for PINComm integration --&gt;"/>
            <replacefilter token="END formatters for PINComm integration --&gt;"
                           value="&lt;!-- END formatters for PINComm integration --&gt;"/>

            <replacefilter token="&lt;!-- BEGIN connectors for PINComm integration"
                           value="&lt;!-- BEGIN connectors for PINComm integration --&gt;"/>
            <replacefilter token="END connectors for PINComm integration --&gt;"
                           value="&lt;!-- END connectors for PINComm integration --&gt;"/>

            <replacefilter token="&lt;!-- BEGIN filters for PINComm integration"
                           value="&lt;!-- BEGIN filters for PINComm integration --&gt;"/>
            <replacefilter token="END filters for PINComm integration --&gt;"
                           value="&lt;!-- END filters for PINComm integration --&gt;"/>

            <replacefilter token="&lt;!-- BEGIN rules for PINComm integration"
                           value="&lt;!-- BEGIN rules for PINComm integration --&gt;"/>
            <replacefilter token="END rules for PINComm integration --&gt;"
                           value="&lt;!-- END rules for PINComm integration --&gt;"/>

            <replacefilter token="&lt;!-- BEGIN message routing for PINComm integration"
                           value="&lt;!-- BEGIN message routing for PINComm integration --&gt;"/>
            <replacefilter token="END message routing for PINComm integration --&gt;"
                           value="&lt;!-- END message routing for PINComm integration --&gt;"/>
        </replace>

        <replace dir="${installer.staging.pos.config.context.dir}" summary="true">
            <include name="ApplicationContext.xml"/>

            <replacefilter token="$PINCOMM_PRIMARY_IP" value="${input.tender.authorization.pincomm.primaryIpAddress}"/>
            <replacefilter token="$PINCOMM_PRIMARY_PORT" value="${input.tender.authorization.pincomm.primaryPort}"/>
            <replacefilter token="$PINCOMM_SECONDARY_IP" value="${input.tender.authorization.pincomm.secondaryIpAddress}"/>
            <replacefilter token="$PINCOMM_SECONDARY_PORT" value="${input.tender.authorization.pincomm.secondaryPort}"/>
            <replacefilter token="$PINCOMM_TERTIARY_IP" value="${input.tender.authorization.pincomm.tertiaryIpAddress}"/>
            <replacefilter token="$PINCOMM_TERTIARY_PORT" value="${input.tender.authorization.pincomm.tertiaryPort}"/>
            <replacefilter token="$PINCOMM_IMAGE_CAPTURE_URI" value="${input.tender.authorization.pincomm.imageCaptureUri}"/>
            <replacefilter token="$PINCOMM_SSL_ENABLED" value="${input.tender.authorization.pincomm.sslEnabled}"/>
            <replacefilter token="&lt;!-- BEGIN application objects for PINComm integration"
                           value="&lt;!-- BEGIN application objects for PINComm integration --&gt;"/>
            <replacefilter token="END application objects for PINComm integration --&gt;"
                           value="&lt;!-- END application objects for PINComm integration --&gt;"/>
        </replace>

        <if>
            <isset property="install.is-ssl-enabled-pincomm-install"/>
            <then>
                <replace dir="${installer.staging.pos.config.context.dir}" summary="true">
                    <include name="ApplicationContext.xml"/>
                    <replacefilter token="$PINCOMM_SSL_KEY_STORE" value="${escaped.ssl.keystore.location}"/>
                    <replacefilter token="$PINCOMM_SSL_TRUST_STORE" value="${escaped.ssl.truststore.location}"/>
                </replace>
            </then>
            <else>
                <replace dir="${installer.staging.pos.config.context.dir}" summary="true">
                    <include name="ApplicationContext.xml"/>
                    <replacefilter token="$PINCOMM_SSL_KEY_STORE" value=""/>
                    <replacefilter token="$PINCOMM_SSL_TRUST_STORE" value=""/>
                </replace>
            </else>
         </if>


        <copy todir="${installer.staging.common.dir}/lib/isd"
            overwrite="true"
            verbose="${installer.verbose}"
            preservelastmodified="true"
            filtering="true">
            <fileset dir="${input.tender.authorization.pincomm.jar.directory}">
                <include name="${input.tender.authorization.pincomm.jar.imsrtribspecsdk}"/>
                <include name="${input.tender.authorization.pincomm.jar.isdcrypt}"/>
                <include name="${input.tender.authorization.pincomm.jar.mspcommapi}"/>
            </fileset>
        </copy>

    </target>

    <target name="install-stage-pos-config-client-commext-tender-auth">
        <antcall target="install-stage-pos-config-client-commext-tender-auth-sim" inheritRefs="true"/>
        <antcall target="install-stage-pos-config-client-commext-tender-auth-servebase" inheritRefs="true"/>
        <antcall target="install-stage-pos-config-client-commext-tender-auth-isd" inheritRefs="true"/>
    </target>

    <target name="install-stage-pos-config-client-commext-tender-auth-servebase" if="install.is-tender-authorization-servebase">
        <replace dir="${installer.staging.pos.config.manager.dir}" summary="true">
            <include name="PaymentManager.xml"/>

            <replacefilter token="$SERVEBASE_HOSTNAME" value="${input.tender.authorization.servebase.hostname}"/>
            <replacefilter token="$SERVEBASE_PORT" value="${input.tender.authorization.servebase.port}"/>
            <replacefilter token="$SERVEBASE_MERCHANTID" value="${input.tender.authorization.servebase.merchantId}"/>
            <replacefilter token="$SERVEBASE_CUSTOMERCODE" value="${input.tender.authorization.servebase.customerCode}"/>
            <replacefilter token="$SERVEBASE_SITE" value="${input.tender.authorization.servebase.site}"/>
            <replacefilter token="$SERVEBASE_USERNAME" value="${input.tender.authorization.servebase.username}"/>

            <replacefilter token="&lt;!-- BEGIN formatters for Servebase integration"
                           value="&lt;!-- BEGIN formatters for Servebase integration --&gt;"/>
            <replacefilter token="END formatters for Servebase integration --&gt;"
                           value="&lt;!-- END formatters for Servebase integration --&gt;"/>

            <replacefilter token="&lt;!-- BEGIN connectors for Servebase integration"
                           value="&lt;!-- BEGIN connectors for Servebase integration --&gt;"/>
            <replacefilter token="END connectors for Servebase integration --&gt;"
                           value="&lt;!-- END connectors for Servebase integration --&gt;"/>

            <replacefilter token="&lt;!-- BEGIN message routing for Servebase integration"
                           value="&lt;!-- BEGIN message routing for Servebase integration --&gt;"/>
            <replacefilter token="END message routing for Servebase integration --&gt;"
                           value="&lt;!-- END message routing for Servebase integration --&gt;"/>
        </replace>
    </target>

    <target name="install-stage-pos-config-client-commext-tender-auth-isd" if="install.is-tender-authorization-isd">
        <replace dir="${installer.staging.pos.config.manager.dir}" summary="true">
            <include name="PaymentManager.xml"/>

            <replacefilter token="&lt;!-- BEGIN connectors for PINComm integration"
                           value="&lt;!-- BEGIN connectors for PINComm integration --&gt;"/>
            <replacefilter token="END connectors for PINComm integration --&gt;"
                           value="&lt;!-- END connectors for PINComm integration --&gt;"/>

            <replacefilter token="&lt;!-- BEGIN message routing for PINComm integration"
                           value="&lt;!-- BEGIN message routing for PINComm integration --&gt;"/>
            <replacefilter token="END message routing for PINComm integration --&gt;"
                           value="&lt;!-- END message routing for PINComm integration --&gt;"/>
        </replace>
        <!-- include ISDTK jar containing exception classes needed when ISD exceptions from Server are logged on Client -->
        <copy todir="${installer.staging.common.dir}/lib"
            overwrite="true"
            verbose="${installer.verbose}"
            preservelastmodified="true"
            filtering="true">
            <fileset dir="${input.tender.authorization.pincomm.jar.directory}">
                <include name="${input.tender.authorization.pincomm.jar.mspcommapi}"/>
            </fileset>
        </copy>
    </target>

    <target name="install-stage-pos-config-client-commext-tender-auth-sim" if="install.is-tender-authorization-simulated">
        <replace dir="${installer.staging.pos.config.manager.dir}" summary="true">
            <include name="PaymentManager.xml"/>

            <replacefilter token="&lt;!-- BEGIN message routing for Simulated Authentication"
                           value="&lt;!-- BEGIN message routing for Simulated Authentication --&gt;"/>
            <replacefilter token="END message routing for Simulated Authentication --&gt;"
                           value="&lt;!-- END message routing for Simulated Authentication --&gt;"/>
        </replace>
    </target>

    <target name="install-stage-pos-config-client-conduit-properties-unix" if="installer.os.is-windows">
        <replace dir="${installer.staging.pos.config.conduit.dir}" summary="true">
            <include name="**/*.properties"/>
            <replacefilter token="Dimension.constrainedTextAreaPane   = 320,80" value="ImageAppFrame"/>
        </replace>
    </target>
    <target name="install-stage-pos-config-client-conduit-plaf-image" if="install.is-user-interface-type-image-based">
        <replace dir="${installer.staging.pos.config.conduit.dir}" summary="true">
            <include name="ClientConduit*.xml"/>
            <include name="CollapsedConduit*.xml"/>
            <replacefilter token="swanplaf" value="imageplaf"/>
            <replacefilter token="eys.EYSLookAndFeel" value="img.ImgLookAndFeel"/>
            <replacefilter token="eys.EYSUIFactory" value="img.ImgUIFactory"/>
            <replacefilter token="ApplicationFrame" value="ImageAppFrame"/>
        </replace>
    </target>
    <target name="install-stage-pos-config-client-collapsed-conduit-db-journal" if="install.is-client-db-journal-enabled">
        <!-- Comment the Default_Journaling section in CollapsedConduitFF.xml -->
        <replaceregexp match="&lt;!--\s*Begin_Default_Journaling\s*--&gt;" replace="&lt;!-- Begin_Default_Journaling" flags="gi">
            <fileset refid="staging.pos.config.conduit.collapsed.fileset"/>
        </replaceregexp>
        <replaceregexp match="&lt;!--\s*End_Default_Journaling\s*--&gt;" replace="End_Default_Journaling --&gt;" flags="gi">
            <fileset refid="staging.pos.config.conduit.collapsed.fileset"/>
        </replaceregexp>
        <!-- Uncomment the IA_QueuedJournalManager section in ClientConduit.xml -->
        <replaceregexp match="&lt;!--\s*Begin_DB_Journaling" replace="&lt;!-- Begin_DB_Journaling --&gt;" flags="gi">
            <fileset refid="staging.pos.config.conduit.collapsed.fileset"/>
        </replaceregexp>
        <replaceregexp match="End_DB_Journaling\s*--&gt;" replace="&lt;!-- End_DB_Journaling --&gt;" flags="gi">
            <fileset refid="staging.pos.config.conduit.collapsed.fileset"/>
        </replaceregexp>
    </target>
    <target name="install-stage-pos-config-client-conduit-queued-journal-manager" if="install.is-client-queued-journal-manager-enabled">
        <!-- Comment the IA_Default_Journal_Man section in ClientConduit.xml -->
        <replaceregexp match="&lt;!--\s*Begin_IA_Default_Journal_Man\s*--&gt;" replace="&lt;!-- Begin_IA_Default_Journal_Man" flags="gi">
            <fileset refid="staging.pos.config.conduit.client.fileset"/>
        </replaceregexp>
        <replaceregexp match="&lt;!--\s*End_IA_Default_Journal_Man\s*--&gt;" replace="End_IA_Default_Journal_Man --&gt;" flags="gi">
            <fileset refid="staging.pos.config.conduit.client.fileset"/>
        </replaceregexp>
        <!-- Uncomment the IA_QueuedJournalManager section in ClientConduit.xml -->
        <replaceregexp match="&lt;!--\s*Begin_IA_QueuedJournalManager" replace="&lt;!-- Begin_IA_QueuedJournalManager --&gt;" flags="gi">
            <fileset refid="staging.pos.config.conduit.client.fileset"/>
        </replaceregexp>
        <replaceregexp match="End_IA_QueuedJournalManager\s*--&gt;" replace="&lt;!-- End_IA_QueuedJournalManager --&gt;" flags="gi">
            <fileset refid="staging.pos.config.conduit.client.fileset"/>
        </replaceregexp>
    </target>
    <!-- Uncomment ExternalOrderManager section in ClientConduit.xml -->
    <target name="install-stage-pos-config-client-conduit-externalorder-manager" if="install.is-siebel-webservices-install">
        <replaceregexp
            match="&lt;!-- Begin ExternalOrderManager"
            replace="&lt;!-- Begin ExternalOrderManager --&gt;"
            flags="gi">
            <fileset refid="staging.pos.config.conduit.client.fileset"/>
        </replaceregexp>
        <replaceregexp
            match="End ExternalOrderManager --&gt;"
            replace="&lt;!-- End ExternalOrderManager --&gt;"
            flags="gi">
            <fileset refid="staging.pos.config.conduit.client.fileset"/>
        </replaceregexp>
    </target>
    <target name="install-stage-pos-config-client-conduit-default-journal-tech" if="install.is-client-default-journal-tech-disabled">
        <!-- Comment the Default_Journal_Tech section in ClientConduit.xml -->
        <replaceregexp match="&lt;!--\s*Begin_IA_Default_Journal_Tech\s*--&gt;" replace="&lt;!-- Begin_IA_Default_Journal_Tech" flags="gi">
            <fileset refid="staging.pos.config.conduit.client.fileset"/>
        </replaceregexp>
        <replaceregexp match="&lt;!--\s*End_IA_Default_Journal_Tech\s*--&gt;" replace="End_IA_Default_Journal_Tech --&gt;" flags="gi">
            <fileset refid="staging.pos.config.conduit.client.fileset"/>
        </replaceregexp>
    </target>
    <target name="install-stage-pos-config-client-conduit-default-inventory-manager" if="install.is-client-install">
    <if>
        <istrue value="${input.enable.orsim.integration}" />
        <then>
            <replaceregexp file="${installer.staging.pos.config.conduit.dir}/ClientConduit.xml" match="&lt;!--\s*Begin POS SIM Integration Manager" replace="&lt;!-- Begin POS SIM Integration Manager --&gt;" flags="gi" />
            <replaceregexp file="${installer.staging.pos.config.conduit.dir}/ClientConduit.xml" match="END POS SIM Integration Manager\s*--&gt;" replace="&lt;!-- END POS SIM Integration Manager --&gt;" flags="gi" />
        </then>
    </if>
    </target>
    <target name="install-stage-pos-config-client-conduit-db-journal-tech" if="install.is-client-db-journal-enabled">
        <!-- Uncomment the IA_DBJournalTech section in ClientConduit.xml -->
        <replaceregexp match="&lt;!--\s*Begin_IA_DBJournalTech" replace="&lt;!-- Begin_IA_DBJournalTech --&gt;" flags="gi">
            <fileset refid="staging.pos.config.conduit.client.fileset"/>
        </replaceregexp>
        <replaceregexp match="End_IA_DBJournalTech\s*--&gt;" replace="&lt;!-- End_IA_DBJournalTech --&gt;" flags="gi">
            <fileset refid="staging.pos.config.conduit.client.fileset"/>
        </replaceregexp>
    </target>
    <target name="install-stage-pos-config-client-devices" if="install.is-client-install">
        <!-- Update PosDeviceTechnician.xml as necessary -->
        <antcall target="install-stage-pos-config-client-devices-barcode" inheritRefs="true"/>
        <antcall target="install-stage-pos-config-client-devices-cashdrawer" inheritRefs="true"/>
        <antcall target="install-stage-pos-config-client-devices-linedisplay" inheritRefs="true"/>
        <antcall target="install-stage-pos-config-client-devices-hardtotals" inheritRefs="true"/>
        <antcall target="install-stage-pos-config-client-non-sim-devices-printer-none" inheritRefs="true"/>
        <antcall target="install-stage-pos-config-client-devices-printer" inheritRefs="true"/>
        <antcall target="install-stage-pos-config-client-devices-micr" inheritRefs="true"/>
        <antcall target="install-stage-pos-config-client-devices-msr" inheritRefs="true"/>
        <antcall target="install-stage-pos-config-client-devices-dpfingerprint" inheritRefs="true"/>
        <antcall target="install-stage-pos-config-client-devices-IBM" inheritRefs="true"/>
        <antcall target="install-stage-pos-config-client-devices-IBMUS" inheritRefs="true"/>
        <antcall target="install-stage-pos-config-client-devices-HP" inheritRefs="true"/>
        <antcall target="install-stage-pos-config-client-devices-HPUS" inheritRefs="true"/>
        <antcall target="install-stage-pos-config-client-devices-SIM" inheritRefs="true"/>
    </target>
    <target name="install-stage-pos-config-client-devices-barcode" if="install.is-barcode-scanner-enabled">
        <if>
            <not><istrue value="${install.is-printer-franking-enabled}"/></not>
            <then>
                <!-- Replace '<PROPERTY propname="frankingCapable" propvalue="true" proptype="BOOLEAN"/>' -->
                <!-- With    '<PROPERTY propname="frankingCapable" propvalue="false" proptype="BOOLEAN"/>' -->
                <replaceregexp match="&lt;PROPERTY\s+propname=&quot;frankingCapable&quot;\s+propvalue=&quot;true&quot;\s+proptype=&quot;BOOLEAN&quot;/&gt;" replace="&lt;PROPERTY propname=&quot;frankingCapable&quot; propvalue=&quot;false&quot; proptype=&quot;BOOLEAN&quot;/&gt;" flags="gi">
                    <fileset refid="staging.pos.config.device.posdevices.fileset"/>
                </replaceregexp>
            </then>
        </if>
        <!-- Replace 'SimulatedScannerSession' with 'ScannerSession' in PosDeviceTechnician.xml -->
        <replaceregexp match="SimulatedScannerSession" replace="ScannerSession" flags="g">
            <fileset refid="staging.pos.config.device.posdevices.fileset"/>
        </replaceregexp>
    </target>
    <target name="install-stage-pos-config-client-devices-cashdrawer" if="install.is-cash-drawer-enabled">
        <!-- Replace 'SimulatedCashDrawerSession' with 'CashDrawerSession' in PosDeviceTechnician.xml -->
        <replaceregexp match="SimulatedCashDrawerSession" replace="CashDrawerSession" flags="g">
            <fileset refid="staging.pos.config.device.posdevices.fileset"/>
        </replaceregexp>
    </target>
    <target name="install-stage-pos-config-client-devices-linedisplay" if="install.is-line-display-enabled">
        <!-- Replace 'SimulatedLineDisplaySession' with 'LineDisplaySession' in PosDeviceTechnician.xml -->
        <replaceregexp match="SimulatedLineDisplaySession" replace="LineDisplaySession" flags="g">
            <fileset refid="staging.pos.config.device.posdevices.fileset"/>
        </replaceregexp>
    </target>
    <target name="install-stage-pos-config-client-devices-hardtotals" if="install.are-hard-totals-enabled">
        <!-- Replace 'SimulatedHardTotalsSession' with 'HardTotalsSession' in PosDeviceTechnician.xml -->
        <replaceregexp match="SimulatedHardTotalsSession" replace="HardTotalsSession" flags="g">
            <fileset refid="staging.pos.config.device.posdevices.fileset"/>
        </replaceregexp>
    </target>
    <target name="install-stage-pos-config-client-non-sim-devices-printer-none" if="install.is-device-platform-enabled-with-printer-none">
        <!-- Enable the POSPrinterActionGroup in PosDeviceTechnician.xml when devices are not simulated but printing is simulated-->
        <echo>Enable POSPrinterActionGroup</echo>
        <replaceregexp file="${installer.staging.pos.config.technician.dir}/PosDeviceTechnician.xml" match="&lt;!--\s* START JPOS Printer Action Group" replace="&lt;!-- START JPOS Printer Action Group --&gt;" flags="gi"/>
        <replaceregexp file="${installer.staging.pos.config.technician.dir}/PosDeviceTechnician.xml" match="END JPOS Printer Action Group\s*--&gt;" replace="&lt;!-- END JPOS Printer Action Group --&gt;" flags="gi"/>
    </target>
    <target name="install-stage-pos-config-client-devices-printer" if="install.is-printer-enabled">
        <!-- Disable SIMULATED defaultPrinter Session in PosDeviceTechnician.xml -->
        <echo>Disable SIMULATED defaultPrinter Session</echo>
        <replaceregexp file="${installer.staging.pos.config.technician.dir}/PosDeviceTechnician.xml" match="&lt;!--\s* START Simulated DefaultPrinter SESSION --&gt;" replace="&lt;!-- START Simulated DefaultPrinter SESSION" flags="gi"/>
        <replaceregexp file="${installer.staging.pos.config.technician.dir}/PosDeviceTechnician.xml" match="&lt;!-- END Simulated DefaultPrinter SESSION\s*--&gt;" replace="END Simulated DefaultPrinter SESSION --&gt;" flags="gi"/>
        <if>
            <istrue value="${install.is-printer-ipp-enabled}"/>
            <then>
                <echo>Enable IPP Printing</echo>
                <echo>IPP_NAME = ${input.ipp.name}</echo>
                <echo>IPP_LANGUAGE = ${input.ipp.language}</echo>
                <!-- Enable the IppPrinterActionGroup in PosDeviceTechnician.xml for Network Printing -->
                <replaceregexp file="${installer.staging.pos.config.technician.dir}/PosDeviceTechnician.xml" match="&lt;!--\s* START IPP Printer Action Group" replace="&lt;!-- START IPP Printer Action Group --&gt;" flags="gi"/>
                <replaceregexp file="${installer.staging.pos.config.technician.dir}/PosDeviceTechnician.xml" match="END IPP Printer Action Group\s*--&gt;" replace="&lt;!-- END IPP Printer Action Group --&gt;" flags="gi"/>
                <replace dir="${installer.staging.pos.config.context.dir}" summary="true">
                    <include name="DeviceContext.xml"/>
                    <replacefilter token="$IPP_NAME$" value="${input.ipp.name}"/>
                    <replacefilter token="$IPP_NAME_LOCALE$" value="${input.ipp.name.locale}"/>
                    <replacefilter token="$IPP_MEDIA$" value="${input.ipp.media}"/>
                    <replacefilter token="$IPP_ORIENTATION$" value="${input.ipp.orientation}"/>
                </replace>
                <if>
                    <equals arg1="${input.ipp.language}" arg2="pdf"/>
                    <then>
                        <replace dir="${installer.staging.pos.config.context.dir}" summary="true">
                            <include name="DeviceContext.xml"/>
                            <replacefilter token="$IPP_PRINT_MIME$" value="application/pdf"/>
                            <replacefilter token="$IPP_FOP_OUTPUT_MIME$" value="application/pdf}"/>
                            <replacefilter token="$IPP_FOP_OUTPUT_EXTENSION$" value="pdf"/>
                        </replace>
                    </then>
                    <elseif>
                        <equals arg1="${input.ipp.language}" arg2="postscript"/>
                        <then>
                            <replace dir="${installer.staging.pos.config.context.dir}" summary="true">
                                <include name="DeviceContext.xml"/>
                                <replacefilter token="$IPP_PRINT_MIME$" value="application/postscript"/>
                                <replacefilter token="$IPP_FOP_OUTPUT_MIME$" value="application/postscript"/>
                                <replacefilter token="$IPP_FOP_OUTPUT_EXTENSION$" value="ps"/>
                            </replace>
                        </then>
                    </elseif>
                    <elseif>
                        <equals arg1="${input.ipp.language}" arg2="pcl"/>
                        <then>
                            <replace dir="${installer.staging.pos.config.context.dir}" summary="true">
                                <include name="DeviceContext.xml"/>
                                <replacefilter token="$IPP_PRINT_MIME$" value="application/octet-stream"/>
                                <replacefilter token="$IPP_FOP_OUTPUT_MIME$" value="application/vnd.hp-PCL"/>
                                <replacefilter token="$IPP_FOP_OUTPUT_EXTENSION$" value="pcl"/>
                            </replace>
                        </then>
                    </elseif>
                </if>
            </then>
            <else>
                <!-- Enable defaultPrinter Session in PosDeviceTechnician.xml -->
                <replaceregexp file="${installer.staging.pos.config.technician.dir}/PosDeviceTechnician.xml" match="&lt;!--\s* START DefaultPrinter SESSION" replace="&lt;!-- START DefaultPrinter SESSION --&gt;" flags="gi"/>
                <replaceregexp file="${installer.staging.pos.config.technician.dir}/PosDeviceTechnician.xml" match="END DefaultPrinter SESSION\s*--&gt;" replace="&lt;!-- END DefaultPrinter SESSION --&gt;" flags="gi"/>
                <echo>Enable POSPrinterActionGroup</echo>
                <!-- Enable the POSPrinterActionGroup in PosDeviceTechnician.xml for JPOS Printing -->
                <replaceregexp file="${installer.staging.pos.config.technician.dir}/PosDeviceTechnician.xml" match="&lt;!--\s* START JPOS Printer Action Group" replace="&lt;!-- START JPOS Printer Action Group --&gt;" flags="gi"/>
                <replaceregexp file="${installer.staging.pos.config.technician.dir}/PosDeviceTechnician.xml" match="END JPOS Printer Action Group\s*--&gt;" replace="&lt;!-- END JPOS Printer Action Group --&gt;" flags="gi"/>
            </else>
        </if>
    </target>
    <target name="install-stage-pos-config-client-devices-micr" if="install.is-micr-enabled">
        <!-- Replace 'SimulatedMICRSession' with 'MICRSession' in PosDeviceTechnician.xml -->
        <replaceregexp match="SimulatedMICRSession" replace="MICRSession" flags="g">
            <fileset refid="staging.pos.config.device.posdevices.fileset"/>
        </replaceregexp>
    </target>
    <target name="install-stage-pos-config-client-devices-msr" if="install.is-msr-enabled">
        <!-- Replace 'SimulatedMSRSession' with 'MSRSession' in PosDeviceTechnician.xml -->
        <replaceregexp match="SimulatedMSRSession" replace="MSRSession" flags="g">
            <fileset refid="staging.pos.config.device.posdevices.fileset"/>
        </replaceregexp>
    </target>
    <target name="install-stage-pos-config-client-devices-dpfingerprint" if="install.is-digitalpersona-fingerprint-enabled">
        <!-- for digitalPersona fingerprint, replace the SimulatedFingerprintReaderSession with FingerprintReaderSession in PosDeviceTechnician.xml -->
        <replaceregexp match="SimulatedFingerprintReaderSession" replace="FingerprintReaderSession" flags="gi">
            <fileset refid="staging.pos.config.device.posdevices.fileset"/>
        </replaceregexp>
    </target>
    <target name="install-stage-pos-config-client-devices-IBMUS" if="install.is-client-IBMUS-platform-enabled">
        <!-- additional configuration to be done here -->
        <!-- additional configuration to be done here -->
                          <!-- For the IBM US printer option use
                          slip line = -1
                          slip print size = -1
                          always use line feeds = false
                          line size = 42 -->
        <replace dir="${installer.staging.pos.config.technician.dir}" summary="true">
            <include name="PosDeviceTechnician.xml"/>
            <replacefilter token="$SLIP_LINE_SIZE$" value="-1"/>
            <replacefilter token="$SLIP_PRINT_SIZE$" value="-1"/>
            <replacefilter token="$ALWAYS_PRINT_LINE_FEEDS$" value="false"/>
        </replace>
        <replace dir="${installer.staging.pos.config.context.dir}" summary="true">
            <include name="DeviceContext.xml"/>
            <replacefilter token="$RECEIPT_LINE_SIZE$" value="44"/>
            <replacefilter token="$PRINT_BUFFERING_ENABLED$" value="true"/>
            <replacefilter token="$TRANSACTIONAL_PRINTING$" value="true"/>
        </replace>
    </target>
    <target name="install-stage-pos-config-client-devices-IBM" if="install.is-client-IBM-platform-enabled">
          <!-- additional configuration to be done here -->
                  <!-- For the IBM I18N printer option use
                  slip line = 29
                  slip print size = 24
                  always use line feeds = true
                  line size = 38 -->
        <replace dir="${installer.staging.pos.config.technician.dir}" summary="true">
            <include name="PosDeviceTechnician.xml"/>
            <replacefilter token="$SLIP_LINE_SIZE$" value="29"/>
            <replacefilter token="$SLIP_PRINT_SIZE$" value="24"/>
            <replacefilter token="$ALWAYS_PRINT_LINE_FEEDS$" value="true"/>
        </replace>
        <replace dir="${installer.staging.pos.config.context.dir}" summary="true">
            <include name="DeviceContext.xml"/>
            <replacefilter token="$RECEIPT_LINE_SIZE$" value="38"/>
            <replacefilter token="$PRINT_BUFFERING_ENABLED$" value="true"/>
            <replacefilter token="$TRANSACTIONAL_PRINTING$" value="true"/>
        </replace>
    </target>
    <target name="install-stage-pos-config-client-devices-HP" if="install.is-client-HP-platform-enabled">
        <!-- additional configuration to be done here -->
        <replace dir="${installer.staging.pos.config.technician.dir}" summary="true">
            <include name="PosDeviceTechnician.xml"/>
            <replacefilter token="$SLIP_LINE_SIZE$" value="-1"/>
            <replacefilter token="$SLIP_PRINT_SIZE$" value="-1"/>
            <replacefilter token="$ALWAYS_PRINT_LINE_FEEDS$" value="false"/>
        </replace>
        <replace dir="${installer.staging.pos.config.context.dir}" summary="true">
            <include name="DeviceContext.xml"/>
            <replacefilter token="$RECEIPT_LINE_SIZE$" value="42"/>
            <replacefilter token="$PRINT_BUFFERING_ENABLED$" value="false"/>
            <replacefilter token="$TRANSACTIONAL_PRINTING$" value="false"/>
        </replace>
    </target>
    <target name="install-stage-pos-config-client-devices-HPUS" if="install.is-client-HPUS-platform-enabled">
        <!-- additional configuration to be done here -->
        <replace dir="${installer.staging.pos.config.technician.dir}" summary="true">
            <include name="PosDeviceTechnician.xml"/>
            <replacefilter token="$SLIP_LINE_SIZE$" value="-1"/>
            <replacefilter token="$SLIP_PRINT_SIZE$" value="-1"/>
            <replacefilter token="$ALWAYS_PRINT_LINE_FEEDS$" value="false"/>
        </replace>
        <replace dir="${installer.staging.pos.config.context.dir}" summary="true">
            <include name="DeviceContext.xml"/>
            <replacefilter token="$RECEIPT_LINE_SIZE$" value="44"/>
            <replacefilter token="$PRINT_BUFFERING_ENABLED$" value="false"/>
            <replacefilter token="$TRANSACTIONAL_PRINTING$" value="false"/>
        </replace>
    </target>
    <target name="install-stage-pos-config-client-devices-SIM" if="install.is-client-simulated-platform-enabled">
        <!-- additional configuration to be done here -->
        <replace dir="${installer.staging.pos.config.technician.dir}" summary="true">
            <include name="PosDeviceTechnician.xml"/>
            <replacefilter token="$SLIP_LINE_SIZE$" value="-1"/>
            <replacefilter token="$SLIP_PRINT_SIZE$" value="-1"/>
            <replacefilter token="$ALWAYS_PRINT_LINE_FEEDS$" value="false"/>
        </replace>
        <replace dir="${installer.staging.pos.config.context.dir}" summary="true">
            <include name="DeviceContext.xml"/>
            <replacefilter token="$RECEIPT_LINE_SIZE$" value="42"/>
            <replacefilter token="$PRINT_BUFFERING_ENABLED$" value="true"/>
            <replacefilter token="$TRANSACTIONAL_PRINTING$" value="true"/>
        </replace>
        <if>
            <not><istrue value="${install.is-printer-ipp-enabled}"/></not>
            <then>
              <echo>Enable POSPrinterActionGroup [SIM]</echo>
              <replaceregexp file="${installer.staging.pos.config.technician.dir}/PosDeviceTechnician.xml" match="&lt;!--\s* START JPOS Printer Action Group" replace="&lt;!-- START JPOS Printer Action Group --&gt;" flags="gi"/>
              <replaceregexp file="${installer.staging.pos.config.technician.dir}/PosDeviceTechnician.xml" match="END JPOS Printer Action Group\s*--&gt;" replace="&lt;!-- END JPOS Printer Action Group --&gt;" flags="gi"/>
           </then>
        </if>
    </target>
    <target name="install-stage-pos-config-storeserver" depends="install-stage-pos-config-storeserver-conduit"/>
    <target name="install-stage-pos-config-storeserver-conduit">
        <!-- Update StoreServerConduit.xml as necessary -->
        <antcall target="install-stage-pos-config-storeserver-conduit-co-integration" inheritRefs="true"/>
        <antcall target="install-stage-pos-config-storeserver-conduit-jms-message-center" inheritRefs="true"/>
        <antcall target="install-stage-pos-config-storeserver-conduit-jms-journal" inheritRefs="true"/>
        <antcall target="install-stage-pos-config-storeserver-conduit-webservice-journal" inheritRefs="true"/>
        <antcall target="install-stage-pos-config-storeserver-conduit-poslog-file-export" inheritRefs="true"/>
        <antcall target="install-stage-pos-config-storeserver-conduit-poslog-jms-queue-export" inheritRefs="true"/>
        <antcall target="install-stage-pos-config-storeserver-conduit-trans-retr" inheritRefs="true"/>
        <antcall target="install-stage-pos-config-storeserver-conduit-data-repl-jms" inheritRefs="true"/>
        <antcall target="install-stage-pos-config-storeserver-conduit-data-repl-webservice" inheritRefs="true"/>
        <antcall target="install-stage-pos-config-storeserver-conduit-rtlog" inheritRefs="true"/>
        <antcall target="install-stage-pos-config-storeserver-conduit-sim" inheritRefs="true"/>
        <antcall target="install-stage-pos-config-storeserver-conduit-file-transfer-techician" inheritRefs="true"/>
        <antcall target="install-stage-pos-config-storeserver-conduit-rm-pos" inheritRefs="true"/>
        <antcall target="install-stage-pos-config-storeserver-conduit-tender-auth" inheritRefs="true"/>
        <antcall target="install-stage-pos-config-storeserver-conduit-file-billpay-techician" inheritRefs="true"/>
        <antcall target="install-stage-pos-config-storeserver-conduit-file-pincomm-encryption-key-initializer-techician" inheritRefs="true"/>

        <remove-IA-variable-refs dir="${installer.staging.pos.config.conduit.dir}" includes="*ServerConduit*"/>
    </target>

    <target name="install-stage-pos-config-rm" if="install.is-rm-install">
        <if>
            <or>
                <istrue value="${install.is-rm-mq-install}" />
                <istrue value="${install.is-rm-wl-install}" />
            </or>
            <then>
                <replaceregexp file="${installer.staging.pos.config.technician.dir}/RetailTransactionTechnician.xml"  match="&lt;!--Begin RM Final Messaging" replace="&lt;!-- Begin RM Final Messaging --&gt;" flags="gi"/>
                <replaceregexp file="${installer.staging.pos.config.technician.dir}/RetailTransactionTechnician.xml" match="End RM Final Messaging--&gt;" replace="&lt;!--  End RM Final Messaging --&gt;" flags="gi"/>
            </then>
            <else>
                <replaceregexp file="${installer.staging.pos.config.technician.dir}/RetailTransactionTechnician.xml"  match="&lt;!--Begin RM Final Webservice" replace="&lt;!-- Begin RM Final Webservice --&gt;" flags="gi"/>
                <replaceregexp file="${installer.staging.pos.config.technician.dir}/RetailTransactionTechnician.xml" match="End RM Final Webservice--&gt;" replace="&lt;!--  End RM Final Webservice --&gt;" flags="gi"/>
            </else>
        </if>

        <if>
            <isfalse value="${final.result.send.by.jms}" />
            <then>
                <replace dir="${installer.staging.pos.config.technician.dir}" summary="true">
                    <include name="**/*RetailTransactionTechnician*"/>
                    <replacefilter token="$RM_HOST_NAME" value="${input.rm.server.hostname}"/>
                    <replacefilter token="$HTTP_PROTOCOL" value="${input.rmpos.protocol}"/>
                    <replacefilter token="$RM_APP_PORT" value="${input.rm.application.port}"/>
                    <replacefilter token="$RM_USER" value="${input.rm.admin.username}"/>
                    <replacefilter token="$RM_PWD" value="${install.rm.admin.password-property}"/>
                </replace>
            </then>
        </if>

        <if>
            <istrue value="${install.is-rm-mq-install}" />
            <then>
                <if>
                    <equals arg1="NOSSL" arg2="${input.jms.ssl.level}"/>
                    <then>
                        <property name="input.rm.was.secure.jms" value="false"/>
                    </then>
                    <else>
                        <property name="input.rm.was.secure.jms" value="true"/>
                    </else>
                </if>
                <replace dir="${installer.staging.pos.config.technician.dir}" summary="true">
                    <include name="**/*RetailTransactionTechnician*"/>
                    <replacefilter token="$JMS_HOST_NAME" value="${input.was.mq.hostname}"/>
                    <replacefilter token="$QUEUE_MANAGER" value="${input.was.mq.manager}"/>
                    <replacefilter token="$MQ_PORT" value="${input.was.mq.port}"/>
                    <replacefilter token="$SECURE_JMS" value="${input.rm.was.secure.jms}"/>
                    <replacefilter token="$JMS_USER" value="${input.rm.mq.userid}"/>
                    <replacefilter token="$JMS_PWD" value="${install.rm.mq.password-property}"/>
                    <replacefilter token="$QUEUE_NAME" value="${return.result.queue}"/>
                </replace>
            </then>
        </if>

        <if>
            <istrue value="${install.is-rm-wl-install}" />
            <then>
                <if>
                    <equals arg1="true" arg2="${input.rm.wl.secure.jms}"/>
                    <then>
                        <property name="rm.jndi.protocol" value="t3s"/>
                    </then>
                    <else>
                        <property name="rm.jndi.protocol" value="t3"/>
                    </else>
                </if>
                <replace dir="${installer.staging.pos.config.technician.dir}" summary="true">
                    <include name="**/*RetailTransactionTechnician*"/>
                    <replacefilter token="$JNDI_PROTOCOL" value="${rm.jndi.protocol}"/>
                    <replacefilter token="$JMS_HOST_NAME" value="${input.rm.jms.hostname}"/>
                    <replacefilter token="$MQ_PORT" value="${input.rm.wl.jndi.port}"/>
                    <replacefilter token="$SECURE_JMS" value="${input.rm.wl.secure.jms}"/>
                    <replacefilter token="$JMS_USER" value="${input.rm.mq.userid}"/>
                    <replacefilter token="$JMS_PWD" value="${install.rm.mq.password-property}"/>
                    <replacefilter token="$QUEUE_NAME" value="${return.result.queue}"/>
                    <replacefilter token="$QUEUE_MANAGER" value="NONE"/>
                </replace>
            </then>
        </if>

    </target>

    <target name="install-stage-pos-config-storeserver-conduit-rm-pos" if="install.is-rm-install">
        <!-- uncomment RPITechnician and do server substitution -->
        <replaceregexp file="${installer.staging.pos.config.conduit.dir}/StoreServerConduit.xml"  match="&lt;!--\s*BEGIN ReturnsTechnician" replace="&lt;!-- BEGIN ReturnsTechnician --&gt;" flags="gi"/>
        <replaceregexp file="${installer.staging.pos.config.conduit.dir}/StoreServerConduit.xml"  match="END ReturnsTechnician\s*--&gt;" replace="&lt;!-- END ReturnsTechnician --&gt;" flags="gi"/>
        <replace dir="${installer.staging.pos.config.conduit.dir}" summary="true">
            <include name="**/*StoreServerConduit*"/>
            <replacefilter token="$PROTOCOL$" value="${input.rmpos.protocol}"/>
            <replacefilter token="$RM_SERVER_HOSTNAME$" value="${input.rm.server.hostname}"/>
            <replacefilter token="$RM_SERVER_PORT$" value="${input.rm.application.port}"/>
            <replacefilter token="$RM_SERVER_USER$" value="${input.rm.admin.username}"/>
            <!-- Replace RM_SERVER_PASSWORD with RM user name alias -->
            <replacefilter token="$RM_SERVER_PASSWORD$" value="rmUser"/>
            <replacefilter token="$FINAL_RESULT_SEND_BY_JMS$" value="${final.result.send.by.jms}" />
        </replace>
    </target>

    <target name="install-stage-pos-config-storeserver-conduit-file-transfer-techician" if="install.is-standalone-server-install">
        <!-- comment out FileTransferTechnician from StoreServerConduit.xml -->
        <replaceregexp file="${installer.staging.pos.config.conduit.dir}/StoreServerConduit.xml"  match="&lt;!--\s*BEGIN FileTransferTechnician\s*--&gt;" replace="&lt;!-- BEGIN FileTransferTechnician " flags="gi"/>
        <replaceregexp file="${installer.staging.pos.config.conduit.dir}/StoreServerConduit.xml"  match="&lt;!--\s*END FileTransferTechnician\s*--&gt;" replace="END FileTransferTechnician --&gt; " flags="gi"/>
    </target>

    <target name="install-stage-pos-config-storeserver-conduit-co-integration" if="install.is-integrated-server-install">
        <if>
            <and>
              <isset property="input.data.replication.jms.local.option" />
              <equals arg1="${input.data.replication.jms.local.option}" arg2="false"/>
            </and>
            <then>
                <replace file="${installer.staging.pos.config.conduit.dir}/StoreServerConduit.xml" summary="true">
                    <replacefilter token="$IA_CO_SERVER_NAME$" value="${input.co.hostname}"/>
                </replace>
            </then>
            <else>
                 <replace file="${installer.staging.pos.config.conduit.dir}/StoreServerConduit.xml" summary="true">
                     <replacefilter token="$IA_CO_SERVER_NAME$" value=""/>
                 </replace>
            </else>
        </if>
    </target>

    <target name="install-stage-pos-config-storeserver-conduit-sim" if="install.is-sim-server-install">
        <!-- if inventory inquiry -->
        <if>
            <istrue value="${install.is-inventory-inquiry-install}" />
            <then>
                <replaceregexp file="${installer.staging.pos.config.conduit.dir}/StoreServerConduit.xml"  match="&lt;!--\s*Begin POS SIM Integration Technician" replace="&lt;!-- Begin POS SIM Integration Technician --&gt;" flags="gi"/>
                <replaceregexp file="${installer.staging.pos.config.conduit.dir}/StoreServerConduit.xml" match="END POS SIM Integration Technician\s*--&gt;" replace="&lt;!-- END POS SIM Integration Technician --&gt;" flags="gi"/>
            </then>
        </if>
        <!-- if inventory reservation  -->
        <if>
            <istrue value="${install.is-inventory-reservation-install}" />
            <then>
                <replaceregexp file="${installer.staging.pos.config.dir}/PSITransactionFilterConfig.xml"  match="&lt;!--\s*Begin Inventory Reservation" replace="&lt;!-- Begin Inventory Reservation --&gt;" flags="gi"/>
                <replaceregexp file="${installer.staging.pos.config.dir}/PSITransactionFilterConfig.xml" match="  End Inventory Reservation\s*--&gt;" replace="&lt;!--   End Inventory Reservation --&gt;" flags="gi"/>
            </then>
        </if>
        <!-- if inventory Updates  -->
        <if>
            <istrue value="${install.is-inventory-update-install}" />
            <then>
                <replaceregexp file="${installer.staging.pos.config.dir}/PSITransactionFilterConfig.xml"  match="&lt;!--\s*Begin Inventory Update" replace="&lt;!-- Begin Inventory Update --&gt;" flags="gi"/>
                <replaceregexp file="${installer.staging.pos.config.dir}/PSITransactionFilterConfig.xml" match="  End Inventory Update\s*--&gt;" replace="&lt;!--  End Inventory Update --&gt;" flags="gi"/>
            </then>
        </if>
        <!-- if Serialization enabled -->
        <if>
             <istrue value="${install.is-server-serialization-install}" />
             <then>
                 <replaceregexp file="${installer.staging.pos.config.dir}/PSITransactionFilterConfig.xml"  match="&lt;!--\s*Begin Item Serialization" replace="&lt;!-- Begin Item Serialization --&gt;" flags="gi"/>
                 <replaceregexp file="${installer.staging.pos.config.dir}/PSITransactionFilterConfig.xml" match="  End Item Serialization\s*--&gt;" replace="&lt;!--  End Item Serialization --&gt;" flags="gi"/>
             </then>
        </if>
        <!-- if inventory Updates  OR inventory Reservation -->
        <if>
            <or>
                <istrue value="${install.is-inventory-update-install}" />
                <istrue value="${install.is-inventory-reservation-install}" />
            </or>
            <then>
                <replaceregexp file="${installer.staging.pos.config.technician.dir}/RetailTransactionTechnician.xml"  match="&lt;!--\s*Begin PSI" replace="&lt;!-- Begin PSI --&gt;" flags="gi"/>
                <replaceregexp file="${installer.staging.pos.config.technician.dir}/RetailTransactionTechnician.xml" match="  END PSI\s*--&gt;" replace="&lt;!--  END PSI --&gt;" flags="gi"/>
                <replace dir="${installer.staging.pos.config.technician.dir}" summary="true">
                    <include name="**/*RetailTransactionTechnician*"/>
                    <replacefilter token="$PASSWD_EN" value="${input.is.ws.passwd.enabled}"/>
                    <replacefilter token="$PSI_WS_UID" value="${input.PSI.webservice.uid}"/>
                    <replacefilter token="$PSI_WS_PWD" value="${input.PSI.webservice.passwd-property}"/>
                    <replacefilter token="$PSI_URL" value="${input.ORSIMWebServiceURL}"/>
                </replace>
            </then>
        </if>
        <!-- if item basket  -->
        <if>
            <istrue value="${install.is-server-item-basket-install}" />
            <then>
                <replaceregexp file="${installer.staging.pos.config.conduit.dir}/StoreServerConduit.xml"  match="&lt;!--\s*Begin ItemBasket Connector" replace="&lt;!-- Begin ItemBasket Connector --&gt;" flags="gi"/>
                <replaceregexp file="${installer.staging.pos.config.conduit.dir}/StoreServerConduit.xml" match="End ItemBasket Connector\s*--&gt;" replace="&lt;!--  End ItemBasket Connector --&gt;" flags="gi"/>
                <replace dir="${installer.staging.pos.config.technician.dir}" summary="true">
                    <include name="**/*DefaultConnectorTechnician*"/>
                    <replacefilter token="$PASSWD_EN" value="${input.is.ws.passwd.enabled}"/>
                    <replacefilter token="$PSI_WS_UID" value="${input.PSI.webservice.uid}"/>
                    <replacefilter token="$PSI_WS_PWD" value="${input.PSI.webservice.passwd-property}"/>
                    <replacefilter token="$PSI_URL" value="${input.ORSIMWebServiceURL}"/>
                </replace>
            </then>
        </if>
        <!-- Inventory Inquiry -->
        <if>
           <istrue value="${install.is-inventory-inquiry-install}" />
           <then>
                <replaceregexp file="${installer.staging.pos.config.technician.dir}/DefaultConnectorTechnician.xml" match="&lt;!--\s*Begin Inventory Inquiry" replace="&lt;!--\s*Begin Inventory Inquiry --&gt;" flags="gi"/>
                <replaceregexp file="${installer.staging.pos.config.technician.dir}/DefaultConnectorTechnician.xml" match="End Inventory Inquiry\s*--&gt;" replace="&lt;!-- End Inventory Inquiry --&gt;" flags="gi"/>
                <replace dir="${installer.staging.pos.config.technician.dir}" summary="true">
                    <include name="**/*DefaultConnectorTechnician*"/>
                    <replacefilter token="$PASSWD_EN" value="${input.is.ws.passwd.enabled}"/>
                    <replacefilter token="$PSI_WS_UID" value="${input.PSI.webservice.uid}"/>
                    <replacefilter token="$PSI_WS_PWD" value="${input.PSI.webservice.passwd-property}"/>
                    <replacefilter token="$PSI_URL" value="${input.ORSIMWebServiceURL}"/>
                </replace>
           </then>
        </if>
        <!-- Serialization -->
        <if>
            <istrue value="${install.is-server-serialization-install}" />
            <then>
                <replaceregexp file="${installer.staging.pos.config.technician.dir}/DefaultConnectorTechnician.xml" match="&lt;!--\s*Begin UinService" replace="&lt;!--\s*Begin UinService --&gt;" flags="gi"/>
                <replaceregexp file="${installer.staging.pos.config.technician.dir}/DefaultConnectorTechnician.xml" match="End UinService\s*--&gt;" replace="&lt;!-- End UinService --&gt;" flags="gi"/>
                <replace dir="${installer.staging.pos.config.technician.dir}" summary="true">
                     <include name="**/*DefaultConnectorTechnician*"/>
                     <replacefilter token="$PASSWD_EN" value="${input.is.ws.passwd.enabled}"/>
                     <replacefilter token="$PSI_WS_UID" value="${input.PSI.webservice.uid}"/>
                     <replacefilter token="$PSI_WS_PWD" value="${input.PSI.webservice.passwd-property}"/>
                     <replacefilter token="$PSI_URL" value="${input.ORSIMWebServiceURL}"/>
                </replace>
             </then>
         </if>
    </target>
    <!-- CR 30004 do not unconditionally export rtlog -->
    <target name="install-stage-pos-config-storeserver-conduit-rtlog" if="install.is-rtlog-exported">
        <replace file="${installer.staging.pos.config.conduit.dir}/StoreServerConduit.xml" summary="true">
            <replacefilter token="&lt;!-- Begin RTLogExportDaemonTechnician Technician" value="&lt;!-- Begin RTLogExportDaemonTechnician Technician --&gt;"/>
            <replacefilter token="End RTLogExportDaemonTechnician Technician --&gt;" value=""/>
        </replace>
    </target>
    <target name="install-stage-pos-config-storeserver-conduit-data-repl-jms" if="install.is-pos-data-replication-export-jms-enabled">
        <replace file="${installer.staging.pos.config.conduit.dir}/StoreServerConduit.xml" summary="true">
            <replacefilter token="&lt;!-- Begin JMS Data Replication Export" value="&lt;!-- Begin JMS Data Replication Export --&gt;"/>
            <replacefilter token="End JMS DataReplication Export --&gt;" value=""/>
        </replace>
    </target>
    <target name="install-stage-pos-config-storeserver-conduit-data-repl-webservice" if="install.is-pos-data-replication-export-webservice-enabled">
        <replace file="${installer.staging.pos.config.conduit.dir}/StoreServerConduit.xml" summary="true">
            <replacefilter token="&lt;!-- Begin Webservice Data Replication Export" value="&lt;!-- Begin Begin Webservice Data Replication Export --&gt;"/>
            <replacefilter token="End Webservice DataReplication Export --&gt;" value=""/>
        </replace>
    </target>
    <target name="install-stage-pos-config-storeserver-conduit-trans-retr" if="install.transaction-retrieval-location-is-not-local">
        <replace file="${installer.staging.pos.config.conduit.dir}/StoreServerConduit.xml" summary="true">
            <replacefilter token="&lt;!-- Begin EnterpriseDT" value="&lt;!-- Begin EnterpriseDT --&gt;"/>
            <replacefilter token="End EnterpriseDT --&gt;" value=""/>
        </replace>
    </target>
    <target name="install-stage-pos-config-storeserver-conduit-jms-message-center" if="install.is-server-install">
        <!-- Uncomment the IA_JMS_MESSAGE_CENTER section in StoreServerConduit.xml -->
        <if>
            <!-- but not for was -->
            <isset property="install.is-appserver-NOTWAS" />
            <then>
                <replaceregexp match="&lt;!--\s*IA_JMS_MESSAGE_CENTER" replace="" flags="gi">
                    <fileset refid="staging.pos.config.conduit.storeserver.fileset"/>
                </replaceregexp>
                <replaceregexp match="IA_JMS_MESSAGE_CENTER\s*--&gt;" replace="" flags="gi">
                    <fileset refid="staging.pos.config.conduit.storeserver.fileset"/>
                </replaceregexp>
            </then>
        </if>
    </target>
    <target name="install-stage-pos-config-storeserver-conduit-jms-journal" if="install.are-journal-writes-to-jms-queue-enabled">
        <!-- Uncomment the IA_JMSJournal section in StoreServerConduit.xml -->
        <replaceregexp match="&lt;!--\s*IA_JMSJournal" replace="" flags="gi">
            <fileset refid="staging.pos.config.conduit.storeserver.fileset"/>
        </replaceregexp>
        <replaceregexp match="IA_JMSJournal\s*--&gt;" replace="" flags="gi">
            <fileset refid="staging.pos.config.conduit.storeserver.fileset"/>
        </replaceregexp>
    </target>
    <target name="install-stage-pos-config-storeserver-conduit-webservice-journal" if="install.are-journal-writes-to-webservice-enabled">
        <!-- Uncomment the IA_WSJournal section in StoreServerConduit.xml -->
        <replaceregexp match="&lt;!--\s*IA_WSJournal" replace="" flags="gi">
            <fileset refid="staging.pos.config.conduit.storeserver.fileset"/>
        </replaceregexp>
        <replaceregexp match="IA_WSJournal\s*--&gt;" replace="" flags="gi">
            <fileset refid="staging.pos.config.conduit.storeserver.fileset"/>
        </replaceregexp>
    </target>
    <target name="install-stage-pos-config-storeserver-conduit-poslog-file-export" if="install.is-poslog-file-export-enabled">
        <!-- Uncomment the 'POSLog File Export' section in StoreServerConduit.xml -->
        <replaceregexp match="&lt;!--\s*Begin POSLog File Export" replace="" flags="gi">
            <fileset refid="staging.pos.config.conduit.storeserver.fileset"/>
        </replaceregexp>
        <replaceregexp match="End POSLog File Export\s*--&gt;" replace="" flags="gi">
            <fileset refid="staging.pos.config.conduit.storeserver.fileset"/>
        </replaceregexp>
    </target>
    <target name="install-stage-pos-config-storeserver-conduit-poslog-jms-queue-export" if="install.is-poslog-jms-queue-export-enabled">
        <!-- Uncomment the 'POSLog Queue Export' section in StoreServerConduit.xml -->
        <replaceregexp match="&lt;!--\s*Begin POSLog Queue Export" replace="" flags="gi">
            <fileset refid="staging.pos.config.conduit.storeserver.fileset"/>
        </replaceregexp>
        <replaceregexp match="End POSLog Queue Export\s*--&gt;" replace="" flags="gi">
            <fileset refid="staging.pos.config.conduit.storeserver.fileset"/>
        </replaceregexp>
    </target>
    <target name="install-stage-pos-config-storeserver-conduit-remote-data-tier" if="install.is-remote-data-tier-enabled">
        <!-- Uncomment the 'RemoteDT' section in StoreServerConduit.xml -->
        <replaceregexp match="&lt;!--\s*Begin RemoteDT\s*-->" replace="" flags="gi">
            <fileset refid="staging.pos.config.conduit.storeserver.fileset"/>
        </replaceregexp>
        <replaceregexp match="&lt;!--\s*End RemoteDT\s*--&gt;" replace="" flags="gi">
            <fileset refid="staging.pos.config.conduit.storeserver.fileset"/>
        </replaceregexp>
    </target>
    <!-- Bill Pay -->
    <target name="install-stage-pos-config-storeserver-conduit-file-billpay-techician" if="install.is-billpay-install">
        <!-- comment out BillPayTechnician from StoreServerConduit.xml -->
        <replaceregexp file="${installer.staging.pos.config.conduit.dir}/StoreServerConduit.xml"  match="&lt;!--\s*BEGIN BillPay" replace="&lt;!-- BEGIN BillPay --&gt;" flags="gi"/>
        <replaceregexp file="${installer.staging.pos.config.conduit.dir}/StoreServerConduit.xml"  match="END BillPay\s*--&gt;" replace="&lt;!-- END BillPay --&gt;" flags="gi"/>

        <!-- comment out BillPay connectors from DefaultConnectorTechnician.xml -->
        <replaceregexp file="${installer.staging.pos.config.technician.dir}/DefaultConnectorTechnician.xml" match="&lt;!--\s*BEGIN BillPay" replace="&lt;!-- BEGIN BillPay --&gt;" flags="gi"/>
        <replaceregexp file="${installer.staging.pos.config.technician.dir}/DefaultConnectorTechnician.xml" match="END BillPay\s*--&gt;" replace="&lt;!-- END BillPay --&gt;" flags="gi"/>

        <!-- comment out BillPay connectors from RetailTransactionTechnician.xml -->
        <replaceregexp file="${installer.staging.pos.config.technician.dir}/RetailTransactionTechnician.xml" match="&lt;!--\s*BEGIN BillPay" replace="&lt;!-- BEGIN BillPay --&gt;" flags="gi"/>
        <replaceregexp file="${installer.staging.pos.config.technician.dir}/RetailTransactionTechnician.xml" match="END BillPay\s*--&gt;" replace="&lt;!-- END BillPay --&gt;" flags="gi"/>

        <!-- comment out Simulated billpay service from ServiceContext.xml -->
        <replaceregexp file="${installer.staging.pos.config.context.dir}/ServiceContext.xml" match="&lt;!--\s*BEGIN BillPay" replace="&lt;!-- BEGIN BillPay --&gt;" flags="gi"/>
        <replaceregexp file="${installer.staging.pos.config.context.dir}/ServiceContext.xml" match="END BillPay\s*--&gt;" replace="&lt;!-- END BillPay --&gt;" flags="gi"/>
    </target>
     <!-- Pincomm Encryption Key Initializer -->
    <target name="install-stage-pos-config-storeserver-conduit-file-pincomm-encryption-key-initializer-techician" if="install.is-tender-authorization-isd">
            <!-- Uncomment the PincommEncryptionKeyInitializerTechnician from StoreServerConduit.xml -->
            <replaceregexp file="${installer.staging.pos.config.conduit.dir}/StoreServerConduit.xml"  match="&lt;!--\s*BEGIN PincommEncryptionKeyInitializer" replace="&lt;!-- BEGIN PincommEncryptionKeyInitializer --&gt;" flags="gi"/>
            <replaceregexp file="${installer.staging.pos.config.conduit.dir}/StoreServerConduit.xml"  match="END PincommEncryptionKeyInitializer\s*--&gt;" replace="&lt;!-- END PincommEncryptionKeyInitializer --&gt;" flags="gi"/>
    </target>
    <target name="install-stage-pos-config-rsa" if="install.is-rsa-encryption-enabled">
        <tstamp><format property="rsa.client.timestamp" pattern="yyMMddHHmmss" locale="en" /></tstamp>
        <if>
            <equals arg1="${input.install.type}" arg2="CLIENT"/>
            <then>
                <property name="RSA_CLIENT_APP_NAME" value="Client_Store_${input.configured.store.id}_Register_${input.register.number}_${rsa.client.timestamp}"/>
            </then>
            <else>
                <property name="RSA_CLIENT_APP_NAME" value="StoreServer_Store_${input.configured.store.id}_${rsa.client.timestamp}"/>
            </else>
        </if>
        <encrypt text ="${input.ssl.keystore.password}" property="input.ssl.keystore.password-encrypted"/>
        <encrypt text ="${input.rsa.cache.keystore.password}" property="input.rsa.cache.keystore.password-encrypted"/>
        <replace file="${installer.staging.pos.config.dir}/rsa_config.properties">
            <replacefilter token="$RSA_SERVER_HOST$" value="${input.rsa.server.host}"/>
            <replacefilter token="$RSA_SERVER_PORT$" value="${input.rsa.server.port}"/>
            <replacefilter token="$RSA_CIPHER_KEY_CLASS$" value="${input.rsa.cipher.key.class}"/>
            <replacefilter token="$KEYSTORE$" value="${escaped.ssl.keystore.location}"/>
            <replacefilter token="$RSA_SERVER_KEYSTORE_FILE$" value="${install.rsa.server.keystore.file}"/>
            <replacefilter token="$CLIENT_KEYSTORE_PROPERTY$" value="${input.ssl.keystore.password-encrypted}"/>
            <replacefilter token="$RSA_CACHE_PROPERTY$" value="${input.rsa.cache.keystore.password-encrypted} "/>
            <replacefilter token="$RSA_CLIENT_APP_NAME$" value="${RSA_CLIENT_APP_NAME} "/>
        </replace>
    </target>
    <target name="deploy-database" description="Runs database specific deployment targets">
        <if>
            <and>
              <isset property="input.install.database" />
              <not><equals arg1="${input.install.database}" arg2="no"/></not>
            </and>
            <then>
                <antcall target="${input.db.type}-deploy-database" inheritRefs="true"/>
            </then>
        </if>
    </target>
    <target name="ibm-deploy-database">
        <property file="${installer.staging.dir}/pos/bin/db.properties"/>
        <echo>Testing the Database connection.  A failure here indicates an issue communicating with the Database.</echo>


         <stringenc operation="retrieve" csfUserNameAlias="${inst.db.owner.password-encrypted}" outputproperty="db.owner.password"/>

        <!-- testing db connection -->
        <sql driver="${inst.db.jdbc-driver}"
             url="${inst.db.jdbc-url}"
         userid="${inst.db.owner.user}"
         password="${db.owner.password}"
         onerror="stop">
                 <classpath>
                    <pathelement location="${inst.db.jdbc-path}/${inst.db.jdbc-jar}"/>
                    <pathelement location="${inst.db.jdbc-path}/${inst.db.jdbc-jar2}"/>
                 </classpath>
            select * from sysibm.DUAL;
        </sql>
        <if>
            <equals arg1="${input.install.database}" arg2="schema"/>
            <then>
                <ant dir="${installer.staging.dir}/pos/bin" antfile="${installer.staging.dir}/pos/bin/db.xml" target="create_empty_db"/>
            </then>
            <elseif>
                <equals arg1="${input.install.database}" arg2="minimum"/>
                <then>
                    <ant dir="${installer.staging.dir}/pos/bin" antfile="${installer.staging.dir}/pos/bin/db.xml" target="create_minimum_db"/>
                </then>
            </elseif>
            <elseif>
                <equals arg1="${input.install.database}" arg2="sample"/>
                <then>
                    <ant dir="${installer.staging.dir}/pos/bin" antfile="${installer.staging.dir}/pos/bin/db.xml" target="extract_dataset">
                        <property name="dataset.sample" value="true"/>
                    </ant>
                    <ant dir="${installer.staging.dir}/pos/bin" antfile="${installer.staging.dir}/pos/bin/db.xml" target="create_sample_db"/>
                </then>
            </elseif>
            <elseif>
                <equals arg1="${input.install.database}" arg2="unittest"/>
                <then>
                    <ant dir="${installer.staging.dir}/pos/bin" antfile="${installer.staging.dir}/pos/bin/db.xml" target="create_unittest_db"/>
                </then>
            </elseif>
            <elseif>
                <equals arg1="${input.install.database}" arg2="qatest"/>
                <then>
                    <ant dir="${installer.staging.dir}/pos/bin" antfile="${installer.staging.dir}/pos/bin/db.xml" target="create_qatest_db"/>
                </then>
            </elseif>
        </if>
    </target>
    <target name="oracle-deploy-database">
        <property file="${installer.staging.dir}/pos/bin/db.properties"/>
        <echo>Testing the Database connection.  A failure here indicates an issue communicating with the Database.</echo>

        <stringenc operation="retrieve" csfUserNameAlias="${inst.db.owner.password-encrypted}" outputproperty="db.owner.password"/>

        <!-- testing db connection -->
        <sql driver="${inst.db.jdbc-driver}"
             url="${inst.db.jdbc-url}"
            userid="${inst.db.owner.user}"
            password="${db.owner.password}"
            onerror="stop">
            <classpath>
              <pathelement location="${inst.db.jdbc-path}/${inst.db.jdbc-jar}"/>
            </classpath>
            select * from dual;
        </sql>
        <if>
            <equals arg1="${input.install.database}" arg2="schema"/>
            <then>
                <ant dir="${installer.staging.dir}/pos/bin" antfile="${installer.staging.dir}/pos/bin/db.xml" target="create_empty_db"/>
            </then>
            <elseif>
                <equals arg1="${input.install.database}" arg2="minimum"/>
                <then>
                    <ant dir="${installer.staging.dir}/pos/bin" antfile="${installer.staging.dir}/pos/bin/db.xml" target="create_minimum_db"/>
                </then>
            </elseif>
            <elseif>
                <equals arg1="${input.install.database}" arg2="sample"/>
                <then>
                    <ant dir="${installer.staging.dir}/pos/bin" antfile="${installer.staging.dir}/pos/bin/db.xml" target="extract_dataset">
                        <property name="dataset.sample" value="true"/>
                    </ant>
                    <ant dir="${installer.staging.dir}/pos/bin" antfile="${installer.staging.dir}/pos/bin/db.xml" target="create_sample_db"/>
                </then>
            </elseif>
            <elseif>
                <equals arg1="${input.install.database}" arg2="unittest"/>
                <then>
                    <ant dir="${installer.staging.dir}/pos/bin" antfile="${installer.staging.dir}/pos/bin/db.xml" target="create_unittest_db"/>
                </then>
            </elseif>
            <elseif>
                <equals arg1="${input.install.database}" arg2="qatest"/>
                <then>
                    <ant dir="${installer.staging.dir}/pos/bin" antfile="${installer.staging.dir}/pos/bin/db.xml" target="create_qatest_db"/>
                </then>
            </elseif>
        </if>
    </target>
    <target name="deploy-scratchpad-database" description="Runs scratchpad database deployment targets">
        <if>
            <and>
                <isset property="input.install.scratchpad.database" />
                <istrue value="${input.install.scratchpad.database}" />
            </and>
            <then>
                <antcall target="${input.db.type}-deploy-scratchpad-database" inheritRefs="true"/>
            </then>
        </if>
    </target>
    <target name="ibm-deploy-scratchpad-database">
        <property file="${installer.staging.dir}/pos/bin/db.properties"/>
        <echo>Testing the Database connection.  A failure here indicates an issue communicating with the Database.</echo>

        <stringenc operation="retrieve" csfUserNameAlias="${ctr.db.password-encrypted}" outputproperty="ctr.db.password"/>

        <!-- testing db connection -->
        <sql driver="${ctr.db.jdbc-driver}"
             url="${ctr.db.jdbc-url}"
         userid="${ctr.db.user}"
         password="${ctr.db.password}"
         onerror="stop">
            <classpath>
                <pathelement location="${ctr.db.jdbc-path}/${ctr.db.jdbc-jar}"/>
                 <pathelement location="${ctr.db.jdbc-path}/${ctr.db.jdbc-jar2}"/>
            </classpath>
            select * from sysibm.DUAL;
        </sql>
        <if>
            <equals arg1="${input.install.scratchpad.database}" arg2="true"/>
            <then>
                <ant dir="${installer.staging.dir}/pos/bin" antfile="${installer.staging.dir}/pos/bin/db.xml" target="base_data_ctr"/>
            </then>
        </if>
    </target>
    <target name="oracle-deploy-scratchpad-database">
         <property file="${installer.staging.dir}/pos/bin/db.properties"/>
        <echo>Testing the Database connection.  A failure here indicates an issue communicating with the Database.</echo>

        <stringenc operation="retrieve" csfUserNameAlias="${ctr.db.password-encrypted}" outputproperty="ctr.db.password"/>

        <!-- testing db connection -->
        <sql driver="${ctr.db.jdbc-driver}"
             url="${ctr.db.jdbc-url}"
             userid="${ctr.db.user}"
             password="${ctr.db.password}"
             onerror="stop">
             <classpath>
                  <pathelement location="${ctr.db.jdbc-path}/${ctr.db.jdbc-jar}"/>
             </classpath>
             select * from dual;
        </sql>
        <if>
            <equals arg1="${input.install.scratchpad.database}" arg2="true"/>
            <then>
                <ant dir="${installer.staging.dir}/pos/bin" antfile="${installer.staging.dir}/pos/bin/db.xml" target="base_data_ctr"/>
            </then>
        </if>
    </target>
    <target name="clean" depends="init">
        <delete dir="${installer.tmpdir}" quiet="true"/>
        <!-- Stop logging -->
        <securerecord name="${installer.log.file}" action="stop"/>
        <delete>
            <fileset dir="${basedir}">
                <include name="*.log"/>
            </fileset>
        </delete>
    </target>
    <target name="init-macros">
        <macrodef name="remove-IA-variable-refs">
            <attribute name="file" default=""/>
            <attribute name="dir" default=""/>
            <attribute name="includes" default="true"/>
            <sequential>
                <if>
                    <length string="@{file}" trim="true" when="greater" length="0"/>
                    <then>
                        <echo>Stripping remaining IA variables refs from @{file}</echo>
                        <replaceregexp match="\$\w+\$" file="@{file}" replace="" flags="g"/>
                    </then>
                    <else>
                        <echo>Stripping remaining IA variables refs from files in @{dir}</echo>
                        <replaceregexp match="\$\w+\$" replace="" flags="g">
                            <fileset dir="@{dir}" includes="@{includes}"/>
                        </replaceregexp>
                    </else>
                </if>
            </sequential>
        </macrodef>
        <macrodef name="remove-ant-property-refs">
            <attribute name="file" default=""/>
            <attribute name="dir" default=""/>
            <attribute name="includes" default="true"/>
            <sequential>
                <if>
                    <length string="@{file}" trim="true" when="greater" length="0"/>
                    <then>
                        <echo>Stripping remaining Ant property refs from @{file}</echo>
                        <replaceregexp match="\$\{\w.*\w\}" file="@{file}" replace="" flags="g"/>
                    </then>
                    <else>
                        <echo>Stripping remaining Ant property refs from files in @{dir}</echo>
                        <replaceregexp match="\$\{\w.*\w\}" replace="" flags="g">
                            <fileset dir="@{dir}" includes="@{includes}"/>
                        </replaceregexp>
                    </else>
                </if>
            </sequential>
        </macrodef>
    </target>

    <target name="upgrader_load_ant_props" description="loading ant.install.properties file">
        <property file="ant.install.properties"/>
    </target>

    <target name="upgrader_db_scripts" depends="upgrader_load_ant_props,init,install-stage" description="Creating the db upgrader scripts" >
        <if>
           <isset property="input.db.product"/>
              <then>
                  <property name="db.product" value="${input.db.product}"/>
                  <property name="db.vendor" value ="${input.db.type}"/>
              </then>
        </if>

        <ant dir="${installer.staging.dir}/pos/bin" antfile="${installer.staging.dir}/pos/bin/db.xml" target="create_db_upgrader"/>

        <antcall target="clean-staging" inheritRefs="true"/>
    </target>

</project>
