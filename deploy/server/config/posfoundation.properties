# This properties file allows POS to modify foundation.properties values.
groupname=foundation

# Value for the URL stream handler factory that the TierLoader will set to the
# JVM. The protocol handler in foundation recognizes the "classpath" protocol.
# POS has its own factory set here that extends the Ice Browser's URL Stream
# Handler Factory. This recognizes both foundations "classpath" protocol and the
# required protocols for Ice Browser to enable cookies, SSL, and proxy servers.
#URLStreamHandlerFactory=oracle.retail.stores.pos.utility.classpath.ProtocolHandlerFactory

# workfile.dir sets the default location of some store generated files such as
# those created by the FileQueue class.
# NOTE: Windows file seperator characters "\" must be escaped like this
# "c:\\test".  The trailing file path seperator character is optional and if
# present will be stripped i.e. "c:\\test" is equivalent to "c:\\test\\"
workfile.dir=.

# defines the retry interval between checks of the liveness of cross referenced directories.
RMI.DIRECTORY.RECONNECT.INTERVAL=30000

# valet encryption
CompressValets=false
EncryptValets=false

# Following are SSL properties that only work when EncryptValets is set to true.

# keyStore is the file that resides on the server and holds a valid certificate
# and a private key received from a trusted CA authority. Population of this
# entry is mandatory when EncryptValets is set to true.
# keyStorePassword is the password for the keystore. It will be encrypted the
# first time the application starts. Ensure that the password is prefixed by
# the ! sign, otherwise it won't be encrypted. Start ORPOS right away to ensure
# the configured password is not left in the clear for long.

# replace $KEYSTORE_FILE$ with the location and name of the keystore file
# for example C:\\jdk1.5.0_12\\jre\\lib\\security\\pos
#javax.net.ssl.keyStore=$KEYSTORE_FILE$

# replace $KEYSTORE_PASSWORD$ with the password for the keystore file. Prefix
# the password with ! so it can be encrypted. For example: !changeit
#javax.net.ssl.keyStorePassword=$KEYSTORE_PASSWORD$

# OPTIONAL: from the list if cipher Suites listed below select the ones that you
# want to be enabled. If no suites names are specified, Java will use the
# default ones which is the recommended approach.
#EnabledCipherSuites=SSL_RSA_WITH_RC4_128_MD5, SSL_RSA_WITH_RC4_128_SHA, TLS_RSA_WITH_AES_128_CBC_SHA, TLS_DHE_RSA_WITH_AES_128_CBC_SHA, TLS_DHE_DSS_WITH_AES_128_CBC_SHA, SSL_RSA_WITH_3DES_EDE_CBC_SHA, SSL_DHE_RSA_WITH_3DES_EDE_CBC_SHA, SSL_DHE_DSS_WITH_3DES_EDE_CBC_SHA, SSL_RSA_WITH_DES_CBC_SHA, SSL_DHE_RSA_WITH_DES_CBC_SHA, SSL_DHE_DSS_WITH_DES_CBC_SHA, SSL_RSA_EXPORT_WITH_RC4_40_MD5, SSL_RSA_EXPORT_WITH_DES40_CBC_SHA, SSL_DHE_RSA_EXPORT_WITH_DES40_CBC_SHA, SSL_DHE_DSS_EXPORT_WITH_DES40_CBC_SHA

# OPTIONAL: Set the desired SSL client authentication mode performed by the
# server to one of the following values: REQUIRED, REQUESTED, or NONE.
# If chosen, the server should be configured with a "javax.net.ssl.trustStore"
# that contains certificates from all trusted clients. If the cert file does not
# exist at the default JRE lcoations (see below) then configure the
# "javax.net.ssl.trustStore" above. The client should also be configured with
# a "javax.net.ssl.keyStore" to specify it's private key to which the server
# has the certificate.
#ClientAuthMode=REQUIRED

# NOT REQUIRED if certificate imported into cacerts or jssecacerts.
# replace $TRUSTSTORE_FILE$ with the location and name of the truststore file
# for example C:\\jdk1.5.0_12\\jre\\lib\\security\\posclient
#javax.net.ssl.trustStore=$TRUSTSTORE_FILE$

# replace $TRUSTSTORE_PASSWORD$ with the password for the truststore file.
# Prefix the password with ! so it can be encrypted. For example: !changeit
#javax.net.ssl.trustStorePassword=$TRUSTSTORE_PASSWORD$

# Set the FoundationObjectFactory instance.
FoundationObjectFactory=oracle.retail.stores.foundation.factory.FoundationObjectFactory
